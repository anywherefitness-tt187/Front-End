[{"/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/index.js":"1","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/reportWebVitals.js":"2","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/App.js":"3","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/User.js":"4","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/Home.js":"5","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/useDarkMode.js":"6","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/NavBar.js":"7","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/Register.js":"8","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/Login.js":"9","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/Instructor/InstructorHome.js":"10","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/useLocalStorage.js":"11","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/Instructor/InstructorDashboard.js":"12","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/Instructor/InstructorCreateForm.js":"13","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/Instructor/InstructorUpdateForm.js":"14","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/Instructor/EnrolledUsers.js":"15","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/PrivateRoute.js":"16","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/Instructor/TestData.js":"17","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/utils/axiosWithAuth.js":"18","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/Instructor/InstructorClass.js":"19","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/client/ClientHome.js":"20","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/client/Search.js":"21","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/client/ClassCard.js":"22","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/reducers/index.js":"23","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/actions/index.js":"24","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/client/ScheduledClasses.js":"25"},{"size":1011,"mtime":1610432904973,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":1610429772304,"results":"28","hashOfConfig":"27"},{"size":1301,"mtime":1610511647289,"results":"29","hashOfConfig":"27"},{"size":103,"mtime":1610429772287,"results":"30","hashOfConfig":"27"},{"size":436,"mtime":1610429772284,"results":"31","hashOfConfig":"27"},{"size":583,"mtime":1610429772303,"results":"32","hashOfConfig":"27"},{"size":898,"mtime":1610429772286,"results":"33","hashOfConfig":"27"},{"size":5315,"mtime":1610433456985,"results":"34","hashOfConfig":"27"},{"size":7081,"mtime":1610513516077,"results":"35","hashOfConfig":"27"},{"size":1337,"mtime":1610429772285,"results":"36","hashOfConfig":"27"},{"size":589,"mtime":1610429772303,"results":"37","hashOfConfig":"27"},{"size":3378,"mtime":1610429772285,"results":"38","hashOfConfig":"27"},{"size":9443,"mtime":1610429772285,"results":"39","hashOfConfig":"27"},{"size":10236,"mtime":1610429772285,"results":"40","hashOfConfig":"27"},{"size":2377,"mtime":1610429772284,"results":"41","hashOfConfig":"27"},{"size":449,"mtime":1610429772287,"results":"42","hashOfConfig":"27"},{"size":812,"mtime":1610429772286,"results":"43","hashOfConfig":"27"},{"size":362,"mtime":1610429772305,"results":"44","hashOfConfig":"27"},{"size":4345,"mtime":1610429772284,"results":"45","hashOfConfig":"27"},{"size":2088,"mtime":1610515571584,"results":"46","hashOfConfig":"27"},{"size":574,"mtime":1610430183393,"results":"47","hashOfConfig":"27"},{"size":3336,"mtime":1610515753343,"results":"48","hashOfConfig":"27"},{"size":5441,"mtime":1610512947868,"results":"49","hashOfConfig":"27"},{"size":5797,"mtime":1610515073991,"results":"50","hashOfConfig":"27"},{"size":1898,"mtime":1610515507240,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1jvpyuc",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/index.js",[],["109","110"],"/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/reportWebVitals.js",[],"/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/App.js",[],"/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/User.js",[],"/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/Home.js",[],"/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/useDarkMode.js",[],"/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/NavBar.js",[],"/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/Register.js",["111"],"import React, { useState, useEffect } from 'react';\nimport '../App.css';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport axios from \"axios\";\nimport * as yup from \"yup\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction Register({ setLoginInfo }) {\n  const history = useHistory();\n\n  const [userInfo, setUserInfo] = useState({\n    username: \"\",\n    password: \"\",\n    role: \"\",\n  })\n\n  // managing state for errors.  \n  const [errors, setErrors] = useState({\n    username: \"\",\n    password: \"\",\n    role: \"\",\n  });\n\n  // server error\n  const [serverError, setServerError] = useState(\"\");\n\n  // control whether or not the form can be submitted if there are errors in form validation (in the useEffect)\n  const [buttonIsDisabled, setButtonIsDisabled] = useState(true);\n\n  const handleChange = (e) => {\n    e.persist();\n    const newUserInfo = {\n      ...userInfo,\n      [e.target.name]: e.target.value\n    };\n    console.log('After validate userInfo=', userInfo);\n    validateChange(e); // for each change in input, do inline validation\n    console.log('After validate err State=', errors)\n    setUserInfo(newUserInfo); // update state with new data\n  }\n\n\n  //inline validation of one key-value pair at a time with yup\n  const validateChange = (e) => {\n    yup.reach(formSchema, e.target.name)\n      .validate(e.target.value)\n      .then((valid) => {\n        // the input is passing!\n        // the reset of that input's error\n        console.log(\"valid here\", e.target.name);\n        setErrors({ ...errors, [e.target.name]: \"\" });\n      })\n      .catch((err) => {\n        // the input is breaking form schema\n        console.log(\"err here\", err);\n        setErrors({ ...errors, [e.target.name]: err.errors[0] });\n      });\n  }\n\n  // whenever state updates, validate the entire form.\n  // if valid, then change button to be enabled.\n  useEffect(() => {\n    formSchema.isValid(userInfo).then((valid) => {\n      console.log(\"is my form valid?\", valid);\n\n      // valid is a boolean \n      setButtonIsDisabled(!valid);\n    });\n  }, [userInfo]);\n\n  // Add a schema, used for all validation to determine whether the input is valid or not\n  const formSchema = yup.object().shape({\n    username: yup.string()\n      .min(4, \"Please enter name of atleast 4 characters\")\n      .required(\"Name is required\"),\n\n    password: yup.string()\n      .min(5, \"Please enter password of atleast 5 characters\")\n      .required(\"Please enter Password\"),\n\n    role: yup.string()\n      .oneOf([\"client\", \"instructor\"], \"Please choose Client or Instructor\")\n      .required(\"Please enter role!\"),\n  });\n\n  const handleSubmit = (e) => {\n    console.log('userInfo in submit', userInfo)\n    e.preventDefault();\n    callPost();\n  }\n  const baseURL = \"https://anywherefitness187.herokuapp.com\";\n\n  function callPost() {\n    axios\n      //to be replaced with fitness api from backend\n      .post(`${baseURL}/api/auth/register`, userInfo)\n      .then((res) => {\n        window.localStorage.setItem('token', res.data.token);\n        const role = res.data.cred.role;\n        const userId = res.data.data.slice(3);\n\n        if (role === \"client\") {\n          history.push(`/client`);\n        } else {\n          history.push(`/instructor/dashboard/${userId}`);\n        }\n      })\n      .catch((err) => {\n        console.log('server error in post', err)\n        setServerError(\"oops! Looks like server side error!\");\n      });\n  }\n\n  return (\n    <>\n      <Form className=\"register-form\"\n        onSubmit={handleSubmit}\n        name=\"register\">\n        {serverError && <p className=\"error\">{serverError}</p>}\n        <h2 className=\"text-center\">Please Register!</h2>\n\n        <FormGroup className=\"text-left\">\n\n          <Label htmlFor=\"userName\">Name </Label>\n          <Input type=\"text\"\n            id=\"username\"\n            name=\"username\"\n            value={userInfo.username}\n            onChange={handleChange}\n            placeholder=\"Enter your Name\"\n          />\n          {errors.username.length > 0 ? <p className=\"error\">{errors.username}</p> : null}\n        </FormGroup>\n\n        <FormGroup className=\"text-left\">\n          <Label htmlFor=\"password\"> Password  </Label>\n          <Input type=\"password\"\n            id=\"password\"\n            name=\"password\"\n            value={userInfo.password}\n            onChange={handleChange}\n            placeholder=\"Password\"\n          />\n          {errors.password.length > 0 ? <p className=\"error\">{errors.password}</p> : null}\n        </FormGroup>\n\n        <FormGroup className=\"text-left\">\n          <Label htmlFor=\"role\" > Role\n            <select\n              id=\"role\"\n              name=\"role\"\n              value={userInfo.role}\n              onChange={handleChange}\n              className=\"mt-2 ml-2\"\n            >\n              <option value=\"\">***Please Choose One!***</option>\n              <option value=\"client\">Client</option>\n              <option value=\"instructor\">Instructor</option>\n            </select>\n            {errors.role.length > 0 ? <p className=\"error\">{errors.role}</p> : null}\n          </Label>\n        </FormGroup>\n\n        <Button className=\"btn-lg btn-block\"\n          color=\"primary\"\n          type=\"submit\"\n          disabled={buttonIsDisabled}\n        >Register</Button>\n      </Form>\n    </>\n  );\n}\n\nexport default Register;\n","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/Login.js",["112"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { Form, Input, Label, FormGroup, Button } from 'reactstrap';\nimport { axiosWithAuth } from '../utils/axiosWithAuth';\nimport { gsap } from \"gsap\";\nimport * as yup from \"yup\";\nimport { Spinner } from 'reactstrap';\n\nexport default function Login({ setLoginInfo }) {\n\n  const history = useHistory();\n\n  const [loginData, setLoginData] = useState({\n    username: \"\",\n    password: \"\",\n    role: \"\",\n  });\n\n  //animation on register form whenever rendered\n  useEffect(() => {\n    gsap.from(\".ins-dashboard\", { x: 10, duration: 1, ease: \"slow\" })\n  }, []);\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // managing state for yup validation errors.  \n  const [errors, setErrors] = useState({\n    username: \"\",\n    password: \"\",\n    role: \"\",\n  });\n\n  const handleChange = (e) => {\n    e.persist();\n    const newLoginData = {\n      ...loginData,\n      [e.target.name]: e.target.value\n    };\n    console.log('After validate loginData=', loginData);\n    validateChange(e); // for each change in input, do inline validation\n    console.log('After validate err State=', errors)\n    setLoginData(newLoginData); // update state with new data\n  }\n\n\n  // control whether or not the form can be submitted if there are errors in form validation (in the useEffect)\n  const [buttonIsDisabled, setButtonIsDisabled] = useState(true);\n\n  //inline validation of one key-value pair at a time with yup\n  const validateChange = (e) => {\n    yup.reach(formSchema, e.target.name)\n      .validate(e.target.value)\n      .then((valid) => {\n        // the reset of that input's error\n        console.log(\"valid here\", e.target.name);\n        setErrors({ ...errors, [e.target.name]: \"\" });\n      })\n      .catch((err) => {\n        // the input is breaking form schema\n        console.log(\"err here\", err);\n        setErrors({ ...errors, [e.target.name]: err.errors[0] });\n      });\n  }\n\n  // whenever state updates, validate the entire form.\n  // if valid, then change button to be enabled.\n  useEffect(() => {\n    formSchema.isValid(loginData).then((valid) => {\n      console.log(\"is my form valid?\", valid);\n\n      // valid is a boolean \n      setButtonIsDisabled(!valid);\n    });\n  }, [loginData]);\n\n  // Add a schema, used for all validation to determine whether the input is valid or not\n  const formSchema = yup.object().shape({\n    username: yup.string()\n      .min(4, \"Please enter name of atleast 4 characters\")\n      .required(\"Name is required\"),\n\n    password: yup.string()\n      .min(5, \"Please enter password of atleast 5 characters\")\n      .required(\"Please enter Password\"),\n\n    role: yup.string()\n      .oneOf([\"client\", \"instructor\"], \"Please choose Client or Instructor\")\n      .required(\"Please enter role!\"),\n  });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setLoading(true);\n    postLogin();\n  }\n\n  const postLogin = () => {\n    const loginPayload = {\n      username: loginData.username,\n      password: loginData.password\n    }\n    axiosWithAuth()\n      .post(`/api/auth/login`, loginPayload)\n      .then((res) => {\n        setLoading(false);\n        const userId = res.data.id;\n        const role = loginData.role;\n        const username = loginData.username;\n\n        localStorage.setItem('token', res.data.token)\n        localStorage.setItem('username', username);\n        localStorage.setItem('userId', res.data.id)\n        \n        if (role === \"client\") {\n          history.push(`/client/dashboard/${userId}`);\n        } else {\n          history.push(`/instructor/dashboard/${userId}`);\n        }\n      })\n      .catch(err => {\n        console.log('error in loginData call', err);\n        setLoading(false);\n        setError(\"Invalid Login name or Password\");\n        console.log('Login Failed for the User:', loginData.username);\n      })\n  }\n\n  const routeToRegister = (e) => {\n    history.push('/signup');\n  }\n\n  return (\n    <>\n      {error ? <div className=\"error p-4 text-center\">\n        <p>Oops something went wrong!</p>\n        <h6>Login Failed for the User: {loginData.username}</h6>\n      </div> :\n        <>\n          {loading ?\n            <div className=\"login-form\" >\n              <h4>Loading...Please wait <Spinner color=\"primary\" /> </h4>\n            </div> :\n            <div>\n              <Form className=\"login-form\"\n                onSubmit={handleSubmit}\n                name=\"login\"\n              >\n                <h2 className=\"text-center\">Welcome !</h2>\n                <FormGroup className=\"text-left\">\n                  <Label htmlFor=\"username\"><b> UserName</b> </Label>\n                  <Input type=\"text\"\n                    id=\"username\"\n                    name=\"username\"\n                    value={loginData.username}\n                    onChange={handleChange}\n                    placeholder=\"Enter your email\"\n                  />\n                  {errors.username.length > 0 ? <p className=\"error\">{errors.username}</p> : null}\n                </FormGroup>\n\n                <FormGroup className=\"text-left\">\n                  <Label htmlFor=\"password\"><b> Password</b> </Label>\n                  <Input type=\"password\"\n                    id=\"password\"\n                    name=\"password\"\n                    value={loginData.password}\n                    onChange={handleChange}\n                    placeholder=\"Password\"\n                  />\n                  {errors.password.length > 0 ? <p className=\"error\">{errors.password}</p> : null}\n                </FormGroup>\n                <FormGroup className=\"text-left\">\n                  <Label htmlFor=\"role\"> <b>Role</b>\n                    <select\n                      id=\"role\"\n                      name=\"role\"\n                      value={loginData.role}\n                      onChange={handleChange}\n                      className=\"mt-2 ml-2\"\n                    >\n                      <option value=\"\">***Client or Instructor?***</option>\n                      <option value=\"client\">Client</option>\n                      <option value=\"instructor\">Instructor</option>\n                    </select>\n                  </Label>\n                  {errors.role.length > 0 ? <p className=\"error\">{errors.role}</p> : null}\n                </FormGroup>\n\n                <Button\n                  className=\"btn-lg btn-block ml-2\"\n                  type=\"submit\"\n                  color=\"primary\"\n                  disabled={buttonIsDisabled}>\n                  Log in\n                  </Button>\n                <p className=\"pt-4\">\n                  Haven't registered yet?\n                  <Button\n                    className=\"ml-3 btn-dark \"\n                    onClick={routeToRegister}>\n                    Register\n                  </Button>\n                </p>\n\n                <div className=\"text-center p-2\">\n                  <a href=\"/forgot-password\">Click here Forgot Password?</a>\n                </div>\n              </Form>\n            </div>\n          }\n        </>\n      }\n    </>\n  )\n\n}","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/Instructor/InstructorHome.js",["113"],"import React,{useState} from 'react';\nimport { Route, Switch} from 'react-router-dom';\nimport InstructorDashboard from './InstructorDashboard';\nimport InstructorCreateForm from './InstructorCreateForm';\nimport InstructorUpdateForm from './InstructorUpdateForm';\nimport EnrolledUsers from './EnrolledUsers';\nimport PrivateRoute from '../PrivateRoute';\nimport initialClass from './TestData';\n\nexport default function InstructorHome() {\n   \n //make this classList to context  \n//  const [classList,setClassList]=useState(initialClass);\nconst [classList,setClassList]=useState([]);\n//  const [classDelete,setClassDelete]=useState(false);\n console.log('classList=',classList);\n\n  return (\n      <div className=\"ins_home\">\n        <Switch>\n        <PrivateRoute exact path=\"/instructor/dashboard/:userid\">\n        <InstructorDashboard \n            classList={classList} \n            setClassList={setClassList}\n           />\n        </PrivateRoute>\n        \n        <Route exact path=\"/instructor/createform/:userid\">\n            <InstructorCreateForm />\n        </Route>\n        \n        <Route path=\"/instructor/:userid/updateform/:classid\">\n            <InstructorUpdateForm  />\n        </Route>\n\n        <Route path=\"/instructor/:userid/enrolled/:classid\">\n            <EnrolledUsers />\n        </Route>\n      </Switch> \n      </div>\n  )\n}","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/useLocalStorage.js",[],"/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/Instructor/InstructorDashboard.js",[],"/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/Instructor/InstructorCreateForm.js",["114"],"import React,{useState,useEffect} from 'react';\nimport {useHistory,useParams} from 'react-router-dom';\nimport { Form,FormGroup,Input,Label,Button,Badge} from 'reactstrap';\nimport * as yup from \"yup\";\nimport { axiosWithAuth } from '../../utils/axiosWithAuth';\nimport Modal from 'react-bootstrap/Modal';\nimport { gsap } from \"gsap\";\n\nfunction InstructorCreate(){\n    const history=useHistory();\n    const params=useParams();\n     \n    const [classInfo, setClassInfo]=useState({\n        // class_id:Date.now(),\n        class_name:\"\",\n        class_type:\"\",\n        class_intensity:\"\",\n        class_location:\"\",\n        start_time:\"\",\n        class_duration:\"\",\n        class_max_size:30,\n    })\n\n     //animation on create form whenever rendered\n     useEffect(()=>{\n      gsap.from(\".ins_create\",{x:10,duration: 1,ease:\"slow\"})\n    },[]);\n\n\n    //setup Modal\n    const [show, setShow] = useState(false);\n\n    const handleClose = () =>{\n        setShow(false); \n        history.push(`/instructor/dashboard/${params.userid}`)\n        // const newList=classList.filter(e=>e.id !== item.id)\n        // console.log('newList in delete=',newList);\n        // setClassList(newList);\n    } \n\n    const handleShow = () => setShow(true);\n\n    // control whether or not the form can be submitted if there are errors in form validation (in the useEffect)\n    const [buttonIsDisabled, setButtonIsDisabled] = useState(true);\n\n    // server error\n    const [serverError, setServerError] = useState(\"\");\n\n    // managing state for errors. empty unless inline validation (validateInput) updates key/value pair to have error\n      const [errors, setErrors] = useState({\n        class_name:\"\",\n        class_type:\"\",\n        class_intensity:\"\",\n        class_location:\"\",\n        start_time:\"\",\n        class_duration:\"\",\n        class_max_size:\"\",\n      });\n\n      const handleChange=(e)=>{\n        e.persist();\n        const newClassInfo = {\n            ...classInfo,\n            [e.target.name]:e.target.value\n          };\n          validateChange(e); // for each change in input, do inline validation\n          console.log('After validate err State=', errors)\n          setClassInfo(newClassInfo); // update state with new data\n    }\n\n    //inline validation of one key-value pair at a time with yup\n  const validateChange =(e)=>{\n    yup.reach(formSchema, e.target.name)\n    .validate(e.target.value)\n    .then((valid) => {\n      // the input is passing ! & reset of that input's error\n      console.log(\"valid here\", e.target.name);\n      setErrors({ ...errors, [e.target.name]: \"\" });\n    })\n    .catch((err) => {\n      // the input is breaking form schema\n      console.log(\"err here\", err);\n      setErrors({ ...errors, [e.target.name]: err.errors[0] });\n    });\n }\n\n  // whenever state updates, validate the entire form.\n  // if valid, then change button to be enabled.\n  useEffect(() => {\n    formSchema.isValid(classInfo).then((valid) => {\n      console.log(\"is my form valid?\", valid);\n      // valid is a boolean \n      setButtonIsDisabled(!valid);\n    });\n  }, [classInfo]);\n\n  // Schema, used for all validation to determine whether the input is valid or not\n  const formSchema = yup.object().shape({\n    class_name: yup.string()\n    .min(2,\"Please enter name of atleast 2 characters\")\n    .required(\"ClassName is required!\"),\n\n    class_type:yup.string()\n    .oneOf([\"Strength Training\",\"Spin Class\",\"Power Lift\",\"Yoga\",\"Pilates\",\"Weight Lifting\"])\n    .required(\"Choose Type is required,please choose one!\"),\n\n    class_intensity: yup.string()\n    .oneOf([\"Beginner\",\"Intermediate\",\"Advanced\"])\n    .required(\"Please choose one\"),\n\n    class_location: yup.string().required(\"Location is required!\"),\n\n    start_time: yup.string().required(\"date & time is required!\"),\n\n    class_duration:yup.string().required(\"Duration is required!\"),\n    \n    class_max_size:yup.number()\n    .max(30,\"Max class size allowed is 30\")\n    .required(\"Maxsize is required!\"),\n  });\n\n  const handleSubmit=(e)=>{\n    e.preventDefault();\n    console.log('on submit=',classInfo)\n    axiosWithAuth()  \n          .post(`/api/users/${params.userid}/class`,classInfo)\n          .then((res)=>{\n            console.log('Response back from reqres:',res.data)\n            handleShow();\n            // setClassList([...classList,res.data])\n            //clear server error\n            // setServerError(null);      \n          })\n          .catch((err)=>{\n            console.log('server erro in post',err)\n            setServerError(\"oops! Looks like server side error!\");\n          })        \n  }\n  const handleBack=()=>{\n    history.push(`/instructor/dashboard/${params.userid}`)\n  }\n\nreturn(\n    <>\n    {show ?\n    <Modal show={show} onHide={handleClose}  \n    backdrop=\"static\"\n    keyboard={false}\n    size=\"lg\"\n    aria-labelledby=\"contained-modal-title-vcenter\"\n    centered>\n        <Modal.Header closeButton>\n        <Modal.Title>Yay! You have successfully created your class<h3>{classInfo.class_name}!</h3></Modal.Title>\n        </Modal.Header>\n        <Modal.Body> <h4>Thank you!</h4></Modal.Body>\n        <Modal.Footer>\n        <Button variant=\"secondary\" onClick={handleClose}>\n        Close\n        </Button>\n        </Modal.Footer>\n    </Modal> :   \n    <div>\n    <h3><Badge color=\"primary\">Create new Class here!</Badge></h3>\n    <div className=\"ins_create\">\n        <Form onSubmit={handleSubmit}\n         name=\"inscreate\">\n        {serverError && <p className=\"error\">{serverError}</p>}\n            <FormGroup>\n            <Label htmlFor=\"class_name\"><b>Class Name</b></Label>\n            <Input name=\"class_name\"\n            id=\"class_name\"\n            value={classInfo.class_name}\n            onChange={handleChange}\n            placeholder=\"Burn With us!\"/>\n             {errors.class_name.length > 0 ? <p className=\"error\">{errors.class_name}</p> : null}\n            </FormGroup>\n\n            <FormGroup>\n            <Label htmlFor=\"class_type\"><b>Class Type</b></Label>\n            <Input\n            name=\"class_type\"\n            type=\"select\"\n            id=\"class_type\"\n            value={classInfo.class_type}\n            onChange={handleChange}>\n            <option value=\"\">***Please Choose One!***</option>\n            <option value=\"Strength Training\">Strength Training</option>\n            <option value=\"Spin Class\">Spin Class</option>\n            <option value=\"Power Lift\">Power Lift</option>\n            <option value=\"Yoga\">Yoga</option>\n            <option value=\"Pilates\">Pilates</option>\n            </Input> \n            {errors.class_type.length > 0 ? <p className=\"error\">{errors.class_type}</p> : null}\n            </FormGroup>\n\n            <FormGroup>\n            <Label htmlFor=\"class_intensity\"><b>Class Intensity</b></Label>\n            <Input\n            type=\"select\"\n            name=\"class_intensity\"\n            id=\"class_intensity\"\n            value={classInfo.class_intensity}\n            onChange={handleChange}>\n            <option value=\"\">***Please Choose One!***</option>\n            <option>Beginner</option>\n            <option>Intermediate</option>\n            <option>Advanced</option>\n            </Input> \n            {errors.class_intensity.length > 0 ? <p className=\"error\">{errors.class_intensity}</p> : null}\n            </FormGroup>\n\n            <FormGroup>\n            <Label htmlFor=\"class_location\"><b>Class Location</b></Label>\n            <Input name=\"class_location\"\n            id=\"class_location\"\n            value={classInfo.class_location}\n            onChange={handleChange}\n            placeholder=\"Street,City,State,Zip\"/>\n            {errors.class_location > 0 ? <p className=\"error\">{errors.class_location}</p> : null}\n            </FormGroup>\n\n            <FormGroup>\n            <Label htmlFor=\"start_time\"><b>Class Start Time</b></Label>\n            <Input name=\"start_time\"\n            id=\"start_time\"\n            type=\"datetime-local\"\n            value={classInfo.start_time}\n            onChange={handleChange}\n            placeholder=\"00:00\"/>\n            {errors.start_time > 0 ? <p className=\"error\">{errors.start_time}</p> : null}\n            </FormGroup>\n\n            <FormGroup>\n            <Label htmlFor=\"class_duration\"><b>Class Duration(minutes)</b></Label>\n            <Input name=\"class_duration\"\n            id=\"class_duration\"\n            value={classInfo.class_duration}\n            type=\"Number\"\n            onChange={handleChange}\n            placeholder=\"30minutes\"/>\n            {errors.class_duration > 0 ? <p className=\"error\">{errors.class_duration}</p> : null}\n            </FormGroup>\n\n            <FormGroup>\n            <Label htmlFor=\"class_max_size\"><b>Class Max Size</b></Label>\n            <Input name=\"class_max_size\"\n            id=\"class_max_size\"\n            type=\"number\"\n            min=\"3\"\n            max=\"30\"\n            value={classInfo.class_max_size}\n            onChange={handleChange}\n            />\n            {errors.class_max_size.length > 0 ? <p className=\"error\">{errors.class_max_size}</p> : null}\n\n            </FormGroup>\n            <Button color=\"success\"\n            className=\"btn-lg  btn-block ml-1\"\n            type=\"submit\"\n            disabled={buttonIsDisabled}>Create Class</Button>\n            \n            <Button color=\"warning\"\n            className=\"btn-lg  btn-block ml-1\"\n            onClick={handleBack}>Go Back</Button>\n        </Form>\n    </div>\n    </div>\n    }   \n    </>\n)\n}\n\nexport default InstructorCreate;\n\n\n ","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/Instructor/InstructorUpdateForm.js",["115","116"],"import React,{useState,useEffect} from 'react';\nimport {useHistory,useParams} from 'react-router-dom';\nimport { Form,FormGroup,Input,Label,Button} from 'reactstrap';\nimport * as yup from \"yup\";\nimport { axiosWithAuth } from '../../utils/axiosWithAuth';\nimport Modal from 'react-bootstrap/Modal';\n\nfunction InstructorUpdateForm(){\n    const [updated,setUpdated]=useState(false);\n    const history=useHistory();\n    const params = useParams(); \n    console.log('params.userid in updateform=',params.userid)\n    console.log('params.classid in updateform=',params.classid)\n       //setup Modal\n       const [show, setShow] = useState(false);\n\n      const handleClose = () =>{\n      setShow(false);\n      history.push(`/instructor/dashboard/${params.userid}`)\n       } \n\n      const handleShow = () => setShow(true);\n\n      const [classInfo, setClassInfo]=useState({\n        class_name:\"\",\n        class_intensity: \"\",\n        class_location: \"\",\n        class_max_size: \"\",\n        class_duration:\"\",\n        class_type: \"\",\n        start_time: \"\",\n      }) \n\n    // set classInfo by getting the class of that instructor id\n useEffect(()=>{\n  axiosWithAuth()\n  .get(`/api/users/${params.userid}/class`)\n  .then(res=>{\n      console.log('res in get class:',res)\n      if (res.data.length !== 0){\n          const updateClass=res.data.find(item=>item.id === Number(params.classid));\n          setClassInfo(updateClass)\n       }\n  })\n  .catch(err=>{\n      console.log('err in get class',err)\n  })\n  //has to be id\n  },[params.userid,updated])\n\n  \n    // control whether or not the form can be submitted if there are errors in form validation (in the useEffect)\n    const [buttonIsDisabled, setButtonIsDisabled] = useState(true);\n\n    // server error\n    const [serverError, setServerError] = useState(\"\");\n\n    // managing state for errors. empty unless inline validation (validateInput) updates key/value pair to have error\n      const [errors, setErrors] = useState({\n        class_name:\"\",\n        class_type:\"\",\n        class_intensity:\"\",\n        class_location:\"\",\n        start_time:\"\",\n        class_duration:\"\",\n        class_max_size:\"\",\n      });\n\n      const handleChange=(e)=>{\n        e.persist();\n        const newClassInfo = {\n            ...classInfo,\n            [e.target.name]:e.target.value\n          };\n          validateChange(e); // for each change in input, do inline validation\n          console.log('After validate err State=', errors)\n          setClassInfo(newClassInfo); // update state with new data\n    }\n\n    //inline validation of one key-value pair at a time with yup\n  const validateChange =(e)=>{\n    yup.reach(formSchema, e.target.name)\n    .validate(e.target.value)\n    .then((valid) => {\n      // the input is passing ! & reset of that input's error\n      console.log(\"valid here\", e.target.name);\n      setErrors({ ...errors, [e.target.name]: \"\" });\n    })\n    .catch((err) => {\n      // the input is breaking form schema\n      console.log(\"err here\", err);\n      setErrors({ ...errors, [e.target.name]: err.errors[0] });\n    });\n }\n\n  // whenever state updates, validate the entire form.\n  // if valid, then change button to be enabled.\n  useEffect(() => {\n    formSchema.isValid(classInfo).then((valid) => {\n      console.log(\"is my form valid?\", valid);\n      // valid is a boolean \n      setButtonIsDisabled(!valid);\n    });\n  }, [classInfo]);\n\n  // Add a schema, used for all validation to determine whether the input is valid or not\n  const formSchema = yup.object().shape({\n    class_name: yup.string()\n    .min(2,\"Please enter name of atleast 2 characters\")\n    .required(\"ClassName is required!\"),\n\n    class_type:yup.string()\n    .oneOf([\"Strength Training\",\"Spin Class\",\"Power Lift\",\"Yoga\",\"Pilates\",\"Weight Lifting\"])\n    .required(\"Choose Type is required,please choose one!\"),\n\n    class_intensity: yup.string()\n    .oneOf([\"Beginner\",\"Intermediate\",\"Advanced\"])\n    .required(\"Please choose one\"),\n\n    class_location: yup.string().required(\"Location is required!\"),\n\n    start_time: yup.string().required(\"date & time is required!\"),\n\n    class_duration:yup.string().required(\"Duration is required!\"),\n    \n    class_max_size:yup.number()\n    .max(30,\"Max class size allowed is 30\")\n    .required(\"Maxsize is required!\"),\n  });\n\n  const handleSubmit=(e)=>{\n    e.preventDefault();\n    console.log('on submit=',classInfo)\n    const updatedClassInfo= {\n        class_name:classInfo.class_name,\n        class_intensity: classInfo.class_intensity,\n        class_location: classInfo.class_location,\n        class_max_size: classInfo.class_max_size,\n        class_duration: classInfo.class_duration,\n        class_type: classInfo.class_type,\n        start_time: classInfo.start_time,\n        }; \n\n      console.log('updated class=',updatedClassInfo)\n    axiosWithAuth() \n          .put(`/api/class/${classInfo.id}`, updatedClassInfo)\n          .then((res)=>{\n            console.log('Response back from reqres:',res.data)\n            setUpdated(true);\n            // setClassList([...classList,res.data])\n            handleShow();\n            // history.push(`/instructor/dashboard/${params.userid}`)\n            //clear server error\n            setServerError(null);      \n          })\n          .catch((err)=>{\n            console.log('server erro in post',err)\n            setServerError(\"oops! Looks like server side error!\");\n          }) \n          \n  }\n\n  const handleBack=()=>{\n    history.push(`/instructor/dashboard/${params.userid}`)\n  }\nreturn(\n    <>\n    <h3>Update your class : {classInfo.class_name}!</h3>\n    {show ?\n    <Modal show={show} onHide={handleClose}  \n    backdrop=\"static\"\n    keyboard={false}\n    size=\"lg\"\n    aria-labelledby=\"contained-modal-title-vcenter\"\n    centered>\n        <Modal.Header closeButton>\n        <Modal.Title><h3>Dear {classInfo.username}!</h3></Modal.Title>\n        </Modal.Header>\n        <Modal.Body><h4>Your class is Updated now,Enjoy fitness anywhere!</h4><h3>{classInfo.class_name}</h3> </Modal.Body>\n        <Modal.Footer>\n        <Button variant=\"secondary\" onClick={handleClose}>\n        Close\n        </Button>\n        </Modal.Footer>\n    </Modal> :\n    <div className=\"ins_create\">\n        <Form onSubmit={handleSubmit}\n         name=\"inscreate\">\n        {serverError && <p className=\"error\">{serverError}</p>}\n            <FormGroup>\n            <Label htmlFor=\"class_name\"><b>Class Name</b></Label>\n            <Input name=\"class_name\"\n            id=\"class_name\"\n            value={classInfo.class_name}\n            onChange={handleChange}\n            placeholder=\"Burn With us!\"/>\n             {errors.class_name.length > 0 ? <p className=\"error\">{errors.class_name}</p> : null}\n            </FormGroup>\n\n            <FormGroup>\n            <Label htmlFor=\"class_type\"><b>Class Type</b></Label>\n            <Input\n            name=\"class_type\"\n            type=\"select\"\n            id=\"class_type\"\n            value={classInfo.class_type}\n            onChange={handleChange}>\n            <option value=\"\">***Please Choose One!***</option>\n            <option>Strength Training</option>\n            <option>Spin Class</option>\n            <option>Power Lift</option>\n            <option>Yoga</option>\n            <option>Pilates</option>\n            <option>Weight Lifting</option>\n            </Input> \n            {errors.class_type.length > 0 ? <p className=\"error\">{errors.class_type}</p> : null}\n            </FormGroup>\n\n            <FormGroup>\n            <Label htmlFor=\"class_intensity\"><b>Class Intensity</b></Label>\n            <Input\n            type=\"select\"\n            name=\"class_intensity\"\n            id=\"class_intensity\"\n            value={classInfo.class_intensity}\n            onChange={handleChange}>\n            <option value=\"\">***Please Choose One!***</option>\n            <option>Beginner</option>\n            <option>Intermediate</option>\n            <option>Advanced</option>\n            </Input> \n            {errors.class_intensity.length > 0 ? <p className=\"error\">{errors.class_intensity}</p> : null}\n            </FormGroup>\n \n            <FormGroup>\n            <Label htmlFor=\"class_location\"><b>Class Location</b></Label>\n            <Input name=\"class_location\"\n            id=\"class_location\"\n            value={classInfo.class_location}\n            onChange={handleChange}\n            placeholder=\"Street,City,State,Zip\"/>\n             {errors.class_location.length > 0 ? <p className=\"error\">{errors.class_location}</p> : null}\n            </FormGroup>\n\n            <FormGroup>\n            <Label htmlFor=\"start_time\"><b>Class Start Time</b></Label>\n            <Input name=\"start_time\"\n            id=\"start_time\"\n            type=\"datetime-local\"\n            value={classInfo.start_time}\n            onChange={handleChange}\n            placeholder=\"00:00\"/>\n             {errors.start_time.length > 0 ? <p className=\"error\">{errors.start_time}</p> : null}\n            </FormGroup>\n\n            <FormGroup>\n            <Label htmlFor=\"class_duration\"><b>Class Duration(mins)</b></Label>\n            <Input name=\"class_duration\"\n            id=\"class_duration\"\n            value={classInfo.class_duration}\n            onChange={handleChange}\n            type=\"number\"\n            placeholder=\"45\"/>\n             {errors.class_duration.length > 0 ? <p className=\"error\">{errors.class_duration}</p> : null}\n            </FormGroup>\n\n            <FormGroup>\n            <Label htmlFor=\"class_max_size\"><b>Class Max Size</b></Label>\n            <Input name=\"class_max_size\"\n            id=\"class_max_size\"\n            type=\"number\"\n            min=\"3\"\n            max=\"50\"\n            value={classInfo.class_max_size}\n            onChange={handleChange}\n            />\n             {errors.class_max_size.length > 0 ? <p className=\"error\">{errors.class_max_size}</p> : null}\n            </FormGroup>\n            <Button color=\"success\"\n            className=\"btn-lg  btn-block\"\n            type=\"submit\"\n            disabled={buttonIsDisabled}>Update Class</Button>\n\n            <Button color=\"warning\"\n            className=\"btn-lg  btn-block\"\n            onClick={handleBack}\n            >Go Back</Button>\n        </Form>\n    </div>\n    }\n    </>\n)\n}\n\nexport default InstructorUpdateForm;\n\n\n ","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/Instructor/EnrolledUsers.js",[],"/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/PrivateRoute.js",[],"/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/Instructor/TestData.js",[],"/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/utils/axiosWithAuth.js",[],"/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/Instructor/InstructorClass.js",[],"/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/client/ClientHome.js",["117"],"/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/client/Search.js",[],"/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/client/ClassCard.js",[],"/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/reducers/index.js",["118","119"],"import {\n    SCHEDULE_CLASS,\n    UNSCHEDULE_CLASS,\n    ADD_PASS,\n    EDIT_PASS,\n    DELETE_PASS,\n    DELETE_CLASS_FAILURE,\n    DELETE_CLASS_SUCCESS,\n    DELETE_CLASS_START,\n    ADD_CLASS_FAILURE,\n    ADD_CLASS_SUCCESS,\n    ADD_CLASS_START,\n    EDIT_CLASS_FAILURE,\n    EDIT_CLASS_SUCCESS,\n    EDIT_CLASS_START,\n    FETCHCLASS_SUCCESS,\n    ADD_USER,\n    REMOVE_USER,\n    GET_CLASSES_START,\n    GET_CLASSES_SUCCESS,\n    GET_CLASSES_FAILURE,\n    GET_REGISTERED_CLIENTS_START,\n    GET_REGISTERED_CLIENTS_SUCCESS,\n    GET_REGISTERED_CLIENTS_FAILURE,\n  } from \"../actions/index\";\n  \n  const initialState = {\n    //holder\n    classes: [\n    ],\n    passes: [\n      {\n        workoutName: \"Crossfit at the Beach\",\n        instructor: \"Stephanie\",\n        client: \"Simone\",\n        classesRemaining: 3,\n        id: 0\n      },\n      {\n        workoutName: \"Yoga to Fit\",\n        instructor: \"Johnny\",\n        client: \"Byron\",\n        classesRemaining: 8,\n        id: 1\n      },\n      {\n        workoutName: \"Cross Training\",\n        instructor: \"Alan\",\n        client: \"Peter\",\n        classesRemaining: 3,\n        id: 2\n      },\n      {\n        workoutName: \"Strength 101\",\n        instructor: \"James\",\n        client: \"Max\",\n        classesRemaining: 7,\n        id: 3\n      },\n      {\n        workoutName: \"Ab Ripper X\",\n        instructor: \"Jessica\",\n        client: \"Julissa\",\n        classesRemaining: 4,\n      }\n    ],\n    registeredClients: [],\n    user: \"\",\n    isFetching: false,\n    error: '',\n    isPosting: false,\n    isEditing: false\n  };\n  \n  export const classReducer = (state = initialState, action) => {\n    switch (action.type) {\n  \n      case FETCHCLASS_SUCCESS:\n        return {\n          ...state,\n          classes: action.payload\n  \n        }\n      case SCHEDULE_CLASS:\n        return {\n          ...state,\n          registeredClient: [...state.registeredClient, action.payload],\n          classes: [...state.classes.filter((item, index) => {\n            return item !== action.payload;\n          })]\n        };\n      case UNSCHEDULE_CLASS:\n        return {\n          ...state,\n          registeredClient: [\n            ...state.registeredClient.filter((item, index) => {\n              return item !== action.payload;\n            })\n          ],\n          classes: [...state.classes, action.payload]\n        };\n      case ADD_PASS:\n        return {\n          ...state,\n          passes: [...state.passes, action.payload]\n        };\n      case DELETE_PASS:\n        return {\n          ...state,\n          passes: [\n            ...state.passes.filter((item, index) => {\n              return item !== action.payload;\n            })\n          ]\n        };\n      case EDIT_PASS:\n        return {\n          ...state,\n          passes: state.passes.map(item => {\n            if (item.id === action.payload.id) {\n              return action.payload;\n            }\n            return item;\n          })\n        };\n      case ADD_CLASS_START:\n        return {\n          ...state,\n          isPosting: true\n        };\n      case ADD_CLASS_SUCCESS:\n        return {\n          ...state,\n          isPosting: false,\n          error: '',\n          twoClasses: [...state.twoClasses, action.payload]\n        };\n      case ADD_CLASS_FAILURE:\n        return {\n          ...state,\n          isPosting: false,\n          error: action.payload.data.Error\n        };\n      case EDIT_CLASS_START:\n        return {\n          ...state,\n          isEditing: true\n        }\n      case EDIT_CLASS_SUCCESS:\n        return {\n          ...state,\n          isEditing: false,\n          error: '',\n          twoClasses: state.twoClasses.map(item => {\n            if (item.id === action.payload.id) {\n              return { ...action.payload }\n            }\n            return item\n          })\n        };\n      case EDIT_CLASS_FAILURE:\n        return {\n          ...state,\n          isEditing: false,\n          error: action.payload\n        };\n      case DELETE_CLASS_START:\n        return {\n          ...state,\n          isPosting: true\n        };\n      case DELETE_CLASS_SUCCESS:\n        const filteredClasses = state.classes.filter(c => {\n            return c.id !== action.payload\n        })\n        return {\n          ...state,\n          isPosting: false,\n          error: '',\n          classes: filteredClasses,\n          twoClasses: state.twoClasses.filter(c => c.id !== action.payload)\n        };\n      case DELETE_CLASS_FAILURE:\n        return {\n          ...state,\n          isPosting: false,\n          error: action.payload.data.Error\n        };\n      case GET_CLASSES_START:\n        return {\n          ...state,\n          isFetching: true\n        };\n      case GET_CLASSES_SUCCESS:\n        return {\n          ...state,\n          isFetching: false,\n          error: '',\n          classes: action.payload,\n          twoClasses:\n            action.payload.sort((a, b) => a.id - b.id)\n        };\n      case GET_CLASSES_FAILURE:\n        return {\n          ...state,\n          isFetching: false,\n          error: action.payload\n        };\n\n      case GET_REGISTERED_CLIENTS_SUCCESS:\n        return {\n          ...state,\n          isFetching: false,\n          error: '',\n          registeredClients: action.payload\n        };\n      case ADD_USER:\n        return {\n          ...state,\n          user: action.payload\n        }\n      case REMOVE_USER:\n        return {\n          ...state,\n          user: ''\n        }\n      default:\n        return state;\n    }\n  };","/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/actions/index.js",[],"/Users/jonathandeltoro/Desktop/Front-End-Anywherefitness/src/components/client/ScheduledClasses.js",[],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":69,"column":6,"nodeType":"126","endLine":69,"endColumn":16,"suggestions":"127"},{"ruleId":"124","severity":1,"message":"125","line":75,"column":6,"nodeType":"126","endLine":75,"endColumn":17,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":8,"column":8,"nodeType":"131","messageId":"132","endLine":8,"endColumn":20},{"ruleId":"124","severity":1,"message":"125","line":95,"column":6,"nodeType":"126","endLine":95,"endColumn":17,"suggestions":"133"},{"ruleId":"124","severity":1,"message":"134","line":49,"column":5,"nodeType":"126","endLine":49,"endColumn":28,"suggestions":"135"},{"ruleId":"124","severity":1,"message":"125","line":104,"column":6,"nodeType":"126","endLine":104,"endColumn":17,"suggestions":"136"},{"ruleId":"124","severity":1,"message":"137","line":48,"column":6,"nodeType":"126","endLine":48,"endColumn":28,"suggestions":"138"},{"ruleId":"129","severity":1,"message":"139","line":22,"column":5,"nodeType":"131","messageId":"132","endLine":22,"endColumn":33},{"ruleId":"129","severity":1,"message":"140","line":24,"column":5,"nodeType":"131","messageId":"132","endLine":24,"endColumn":35},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formSchema'. Either include it or remove the dependency array.","ArrayExpression",["143"],["144"],"no-unused-vars","'initialClass' is defined but never used.","Identifier","unusedVar",["145"],"React Hook useEffect has a missing dependency: 'params.classid'. Either include it or remove the dependency array.",["146"],["147"],"React Hook useEffect has a missing dependency: 'displayedClasses'. Either include it or remove the dependency array.",["148"],"'GET_REGISTERED_CLIENTS_START' is defined but never used.","'GET_REGISTERED_CLIENTS_FAILURE' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"153","fix":"157"},{"desc":"158","fix":"159"},"Update the dependencies array to be: [formSchema, userInfo]",{"range":"160","text":"161"},"Update the dependencies array to be: [formSchema, loginData]",{"range":"162","text":"163"},"Update the dependencies array to be: [classInfo, formSchema]",{"range":"164","text":"165"},"Update the dependencies array to be: [params.classid, params.userid, updated]",{"range":"166","text":"167"},{"range":"168","text":"165"},"Update the dependencies array to be: [displayedClasses, props.classes, query]",{"range":"169","text":"170"},[2059,2069],"[formSchema, userInfo]",[2310,2321],"[formSchema, loginData]",[3055,3066],"[classInfo, formSchema]",[1510,1533],"[params.classid, params.userid, updated]",[3367,3378],[1411,1433],"[displayedClasses, props.classes, query]"]