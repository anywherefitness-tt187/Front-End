[{"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\index.js":"1","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\App.js":"2","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\reportWebVitals.js":"3","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\User.js":"4","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Register.js":"5","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Home.js":"6","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorHome.js":"7","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Login.js":"8","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\NavBar.js":"9","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\PrivateRoute.js":"10","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorCreateForm.js":"11","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorDashboard.js":"12","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorUpdateForm.js":"13","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\utils\\axiosWithAuth.js":"14","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorClass.js":"15","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\TestData.js":"16"},{"size":567,"mtime":1608448203526,"results":"17","hashOfConfig":"18"},{"size":945,"mtime":1609370211463,"results":"19","hashOfConfig":"18"},{"size":375,"mtime":1608178925675,"results":"20","hashOfConfig":"18"},{"size":145,"mtime":1608260631413,"results":"21","hashOfConfig":"18"},{"size":5657,"mtime":1609370869914,"results":"22","hashOfConfig":"18"},{"size":436,"mtime":1609369508028,"results":"23","hashOfConfig":"18"},{"size":1799,"mtime":1609370267725,"results":"24","hashOfConfig":"18"},{"size":3457,"mtime":1609370892841,"results":"25","hashOfConfig":"18"},{"size":471,"mtime":1608260631413,"results":"26","hashOfConfig":"18"},{"size":466,"mtime":1608260585323,"results":"27","hashOfConfig":"18"},{"size":7697,"mtime":1609309949037,"results":"28","hashOfConfig":"18"},{"size":1280,"mtime":1609370663953,"results":"29","hashOfConfig":"18"},{"size":7501,"mtime":1609310847848,"results":"30","hashOfConfig":"18"},{"size":329,"mtime":1609223894684,"results":"31","hashOfConfig":"18"},{"size":2041,"mtime":1609310403735,"results":"32","hashOfConfig":"18"},{"size":810,"mtime":1609368331259,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"119rrdn",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\index.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\App.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\reportWebVitals.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\User.js",[],["69","70"],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Register.js",["71"],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Home.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorHome.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Login.js",["72"],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\NavBar.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\PrivateRoute.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorCreateForm.js",["73"],"import React,{useState,useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport { Form,FormGroup,Input,Label,Button,Badge} from 'reactstrap';\r\nimport * as yup from \"yup\";\r\nimport { axiosWithAuth } from '../../utils/axiosWithAuth';\r\n \r\n\r\nfunction InstructorCreate({classList,setClassList}){\r\n    const history=useHistory();\r\n    \r\n    const [classInfo, setClassInfo]=useState({\r\n        class_id:Date.now(),\r\n        class_name:\"\",\r\n        class_type:\"\",\r\n        class_intensity:\"\",\r\n        class_location:\"\",\r\n        start_time:\"\",\r\n        class_duration:\"\",\r\n        class_max_size:30,\r\n        \r\n    })\r\n\r\n    // control whether or not the form can be submitted if there are errors in form validation (in the useEffect)\r\n    const [buttonIsDisabled, setButtonIsDisabled] = useState(true);\r\n\r\n    // server error\r\n    const [serverError, setServerError] = useState(\"\");\r\n\r\n    // managing state for errors. empty unless inline validation (validateInput) updates key/value pair to have error\r\n      const [errors, setErrors] = useState({\r\n        class_name:\"\",\r\n        class_type:\"\",\r\n        class_intensity:\"\",\r\n        class_location:\"\",\r\n        class_starttime:\"\",\r\n        class_duration:\"\",\r\n        class_max_size:\"\",\r\n      });\r\n\r\n      const handleChange=(e)=>{\r\n        e.persist();\r\n        const newClassInfo = {\r\n            ...classInfo,\r\n            [e.target.name]:e.target.value\r\n          };\r\n          validateChange(e); // for each change in input, do inline validation\r\n          console.log('After validate err State=', errors)\r\n          setClassInfo(newClassInfo); // update state with new data\r\n    }\r\n\r\n    //inline validation of one key-value pair at a time with yup\r\n  const validateChange =(e)=>{\r\n    yup.reach(formSchema, e.target.name)\r\n    .validate(e.target.value)\r\n    .then((valid) => {\r\n      // the input is passing ! & reset of that input's error\r\n      console.log(\"valid here\", e.target.name);\r\n      setErrors({ ...errors, [e.target.name]: \"\" });\r\n    })\r\n    .catch((err) => {\r\n      // the input is breaking form schema\r\n      console.log(\"err here\", err);\r\n      setErrors({ ...errors, [e.target.name]: err.errors[0] });\r\n    });\r\n }\r\n\r\n  // whenever state updates, validate the entire form.\r\n  // if valid, then change button to be enabled.\r\n  useEffect(() => {\r\n    formSchema.isValid(classInfo).then((valid) => {\r\n      console.log(\"is my form valid?\", valid);\r\n      // valid is a boolean \r\n      setButtonIsDisabled(!valid);\r\n    });\r\n  }, [classInfo]);\r\n\r\n  // Schema, used for all validation to determine whether the input is valid or not\r\n  const formSchema = yup.object().shape({\r\n    class_name: yup.string()\r\n    .min(2,\"Please enter name of atleast 2 characters\")\r\n    .required(\"ClassName is required!\"),\r\n\r\n    class_type:yup.string().required(\"Choose Type is required!\"),\r\n\r\n    class_intensity: yup.string()\r\n    .oneOf([\"Beginner\",\"Intermediate\",\"Advanced\"])\r\n    .required(\"Please choose one\"),\r\n\r\n    class_location: yup.string().required(\"Location is required!\"),\r\n\r\n    class_starttime: yup.string().required(\"date & time is required!\"),\r\n\r\n    class_duration:yup.string().required(\"Duration is required!\"),\r\n    \r\n    class_max_size:yup.number().required(\"Maxsize is required!\"),\r\n  });\r\n\r\n  const handleSubmit=(e)=>{\r\n    e.preventDefault();\r\n    console.log('on submit=',classInfo)\r\n    axiosWithAuth()  \r\n          // .post(`https://jsonplaceholder.typicode.com/posts`, classInfo)//replace 2 with id once received from login\r\n          .post('/api/users/2/class',classInfo)\r\n          .then((res)=>{\r\n            console.log('Response back from reqres:',res.data)\r\n            setClassList([...classList,res.data])\r\n            history.push('/instructor/dashboard')\r\n            //clear server error\r\n            setServerError(null);      \r\n          })\r\n          .catch((err)=>{\r\n            console.log('server erro in post',err)\r\n            setServerError(\"oops! Looks like server side error!\");\r\n          })        \r\n  }\r\n  const handleBack=()=>{\r\n    history.push('/instructor/dashboard')\r\n  }\r\n\r\nreturn(\r\n    <>\r\n    <h3>Hello Instructor Name! <br/><Badge color=\"primary\">Create new Class</Badge></h3>\r\n    <div className=\"ins_create\">\r\n        <Form onSubmit={handleSubmit}\r\n         name=\"inscreate\">\r\n        {serverError && <p className=\"error\">{serverError}</p>}\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_name\">Class Name</Label>\r\n            <Input name=\"class_name\"\r\n            id=\"class_name\"\r\n            value={classInfo.class_name}\r\n            onChange={handleChange}\r\n            placeholder=\"Burn With us!\"/>\r\n             {errors.class_name.length > 0 ? <p className=\"error\">{errors.class_name}</p> : null}\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_type\">Class Type</Label>\r\n            <Input\r\n            name=\"class_type\"\r\n            type=\"select\"\r\n            id=\"class_type\"\r\n            value={classInfo.class_type}\r\n            onChange={handleChange}>\r\n            <option value=\"\">***Please Choose One!***</option>\r\n            <option>Strength Training</option>\r\n            <option>Spin Class</option>\r\n            <option>Power Lift</option>\r\n            <option>Yoga</option>\r\n            <option>Pilates</option>\r\n            </Input> \r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_intensity\">Class Intensity</Label>\r\n            <Input\r\n            type=\"select\"\r\n            name=\"class_intensity\"\r\n            id=\"class_intensity\"\r\n            value={classInfo.class_intensity}\r\n            onChange={handleChange}>\r\n            <option value=\"\">***Please Choose One!***</option>\r\n            <option>Beginner</option>\r\n            <option>Intermediate</option>\r\n            <option>Advanced</option>\r\n            </Input> \r\n            </FormGroup>\r\n{/* q: backend, 4 fields for location? */}\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_location\">Class Location</Label>\r\n            <Input name=\"class_location\"\r\n            id=\"class_location\"\r\n            value={classInfo.class_location}\r\n            onChange={handleChange}\r\n            placeholder=\"Street,City,State,Zip\"/>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_starttime\">Class Start Time</Label>\r\n            <Input name=\"class_starttime\"\r\n            id=\"class_starttime\"\r\n            type=\"datetime-local\"\r\n            value={classInfo.class_startime}\r\n            onChange={handleChange}\r\n            placeholder=\"00:00\"/>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_duration\">Class Duration</Label>\r\n            <Input name=\"class_duration\"\r\n            id=\"class_duration\"\r\n            value={classInfo.class_duration}\r\n            onChange={handleChange}\r\n            placeholder=\"30minutes\"/>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_max_size\">Class Max Size</Label>\r\n            <Input name=\"class_max_size\"\r\n            id=\"class_max_size\"\r\n            type=\"number\"\r\n            min=\"3\"\r\n            max=\"30\"\r\n            value={classInfo.class_maxsize}\r\n            onChange={handleChange}\r\n            />\r\n            </FormGroup>\r\n            <Button color=\"success\"\r\n            className=\"btn-lg  btn-block\"\r\n            type=\"submit\"\r\n            disabled={buttonIsDisabled}>Create Class</Button>\r\n\r\n            <Button color=\"warning\"\r\n            className=\"btn-lg  btn-block\"\r\n            onClick={handleBack}>Go Back</Button>\r\n        </Form>\r\n    </div>\r\n    </>\r\n)\r\n}\r\n\r\nexport default InstructorCreate;\r\n\r\n\r\n ","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorDashboard.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorUpdateForm.js",["74"],"import React,{useState,useEffect} from 'react';\r\nimport {useHistory,useParams} from 'react-router-dom';\r\nimport { Form,FormGroup,Input,Label,Button} from 'reactstrap';\r\nimport * as yup from \"yup\";\r\nimport { axiosWithAuth } from '../../utils/axiosWithAuth';\r\n \r\n\r\nfunction InstructorUpdateForm({classList,setClassList}){\r\n\r\n    const history=useHistory();\r\n    const params = useParams(); \r\n    \r\n    const updateClass=classList.find(item=>item.id === Number(params.id))\r\n    const [classInfo, setClassInfo]=useState(updateClass);\r\n    console.log('update classlist',classInfo);\r\n    // control whether or not the form can be submitted if there are errors in form validation (in the useEffect)\r\n    const [buttonIsDisabled, setButtonIsDisabled] = useState(true);\r\n\r\n    // server error\r\n    const [serverError, setServerError] = useState(\"\");\r\n\r\n    // managing state for errors. empty unless inline validation (validateInput) updates key/value pair to have error\r\n      const [errors, setErrors] = useState({\r\n        class_name:\"\",\r\n        class_type:\"\",\r\n        class_intensity:\"\",\r\n        class_location:\"\",\r\n        start_time:\"\",\r\n        class_duration:\"\",\r\n        class_max_size:\"\",\r\n      });\r\n\r\n      const handleChange=(e)=>{\r\n        e.persist();\r\n        const newClassInfo = {\r\n            ...classInfo,\r\n            [e.target.name]:e.target.value\r\n          };\r\n          validateChange(e); // for each change in input, do inline validation\r\n          console.log('After validate err State=', errors)\r\n          setClassInfo(newClassInfo); // update state with new data\r\n    }\r\n\r\n    //inline validation of one key-value pair at a time with yup\r\n  const validateChange =(e)=>{\r\n    yup.reach(formSchema, e.target.name)\r\n    .validate(e.target.value)\r\n    .then((valid) => {\r\n      // the input is passing ! & reset of that input's error\r\n      console.log(\"valid here\", e.target.name);\r\n      setErrors({ ...errors, [e.target.name]: \"\" });\r\n    })\r\n    .catch((err) => {\r\n      // the input is breaking form schema\r\n      console.log(\"err here\", err);\r\n      setErrors({ ...errors, [e.target.name]: err.errors[0] });\r\n    });\r\n }\r\n\r\n  // whenever state updates, validate the entire form.\r\n  // if valid, then change button to be enabled.\r\n  useEffect(() => {\r\n    formSchema.isValid(classInfo).then((valid) => {\r\n      console.log(\"is my form valid?\", valid);\r\n      // valid is a boolean \r\n      setButtonIsDisabled(!valid);\r\n    });\r\n  }, [classInfo]);\r\n\r\n  // Add a schema, used for all validation to determine whether the input is valid or not\r\n  const formSchema = yup.object().shape({\r\n    class_name: yup.string()\r\n    .min(2,\"Please enter name of atleast 2 characters\")\r\n    .required(\"ClassName is required!\"),\r\n   \r\n    class_type:yup.string().required(\"Choose Type is required!\"),\r\n\r\n    class_intensity: yup.string()\r\n    .oneOf([\"Beginner\",\"Intermediate\",\"Advanced\"])\r\n    .required(\"Please choose one\"),\r\n\r\n    class_location: yup.string().required(\"Location is required!\"),\r\n\r\n    start_time: yup.string().required(\"date & time is required!\"),\r\n\r\n    class_duration:yup.string().required(\"Duration is required!\"),\r\n    \r\n    class_max_size:yup.string().required(\"Maxsize is required!\"),\r\n  });\r\n\r\n  const handleSubmit=(e)=>{\r\n    e.preventDefault();\r\n    console.log('on submit=',classInfo)\r\n    axiosWithAuth() \r\n          .put(`/api/class/${classList.id}`, classInfo)\r\n          .then((res)=>{\r\n            console.log('Response back from reqres:',res.data)\r\n            // setClassList([...classList,res.data])\r\n            history.push('/instructor/dashboard')\r\n            //clear server error\r\n            setServerError(null);      \r\n          })\r\n          .catch((err)=>{\r\n            console.log('server erro in post',err)\r\n            setServerError(\"oops! Looks like server side error!\");\r\n          }) \r\n          \r\n  }\r\n\r\n  const handleBack=()=>{\r\n    history.push('/instructor/dashboard')\r\n  }\r\nreturn(\r\n    <>\r\n    <h4>Update your class : {classInfo.class_name}!</h4>\r\n    <div className=\"ins_create\">\r\n        <Form onSubmit={handleSubmit}\r\n         name=\"inscreate\">\r\n        {serverError && <p className=\"error\">{serverError}</p>}\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_name\">Class Name</Label>\r\n            <Input name=\"class_name\"\r\n            id=\"class_name\"\r\n            value={classInfo.class_name}\r\n            onChange={handleChange}\r\n            placeholder=\"Burn With us!\"/>\r\n             {errors.class_name.length > 0 ? <p className=\"error\">{errors.class_name}</p> : null}\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_type\">Class Type</Label>\r\n            <Input\r\n            name=\"class_type\"\r\n            type=\"select\"\r\n            id=\"class_type\"\r\n            value={classInfo.class_type}\r\n            onChange={handleChange}>\r\n            <option value=\"\">***Please Choose One!***</option>\r\n            <option>Strength Training</option>\r\n            <option>Spin Class</option>\r\n            <option>Power Lift</option>\r\n            <option>Yoga</option>\r\n            <option>Pilates</option>\r\n            </Input> \r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_intensity\">Class Intensity</Label>\r\n            <Input\r\n            type=\"select\"\r\n            name=\"class_intensity\"\r\n            id=\"class_intensity\"\r\n            value={classInfo.class_intensity}\r\n            onChange={handleChange}>\r\n            <option value=\"\">***Please Choose One!***</option>\r\n            <option>Beginner</option>\r\n            <option>Intermediate</option>\r\n            <option>Advanced</option>\r\n            </Input> \r\n            </FormGroup>\r\n{/* q: backend, 4 fields for location? */}\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_location\">Class Location</Label>\r\n            <Input name=\"class_location\"\r\n            id=\"class_location\"\r\n            value={classInfo.class_location}\r\n            onChange={handleChange}\r\n            placeholder=\"Street,City,State,Zip\"/>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"start_time\">Class Start Time</Label>\r\n            <Input name=\"start_time\"\r\n            id=\"start_time\"\r\n            type=\"datetime-local\"\r\n            value={classInfo.start_time}\r\n            onChange={handleChange}\r\n            placeholder=\"00:00\"/>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_duration\">Class Duration</Label>\r\n            <Input name=\"class_duration\"\r\n            id=\"class_duration\"\r\n            value={classInfo.class_duration}\r\n            onChange={handleChange}\r\n            placeholder=\"30minutes\"/>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_max_size\">Class Max Size</Label>\r\n            <Input name=\"class_max_size\"\r\n            id=\"class_max_size\"\r\n            type=\"number\"\r\n            min=\"3\"\r\n            max=\"50\"\r\n            value={classInfo.class_maxsize}\r\n            onChange={handleChange}\r\n            />\r\n            </FormGroup>\r\n            <Button color=\"success\"\r\n            className=\"btn-lg  btn-block\"\r\n            type=\"submit\"\r\n            disabled={buttonIsDisabled}>Update Class</Button>\r\n\r\n            <Button color=\"warning\"\r\n            className=\"btn-lg  btn-block\"\r\n            onClick={handleBack}\r\n            >Go Back</Button>\r\n        </Form>\r\n    </div>\r\n    </>\r\n)\r\n}\r\n\r\nexport default InstructorUpdateForm;\r\n\r\n\r\n ","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\utils\\axiosWithAuth.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorClass.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\TestData.js",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":70,"column":6,"nodeType":"81","endLine":70,"endColumn":16,"suggestions":"82"},{"ruleId":"83","severity":1,"message":"84","line":16,"column":11,"nodeType":"85","messageId":"86","endLine":16,"endColumn":16},{"ruleId":"79","severity":1,"message":"80","line":75,"column":6,"nodeType":"81","endLine":75,"endColumn":17,"suggestions":"87"},{"ruleId":"79","severity":1,"message":"80","line":68,"column":6,"nodeType":"81","endLine":68,"endColumn":17,"suggestions":"88"},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formSchema'. Either include it or remove the dependency array.","ArrayExpression",["91"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar",["92"],["93"],"no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},{"desc":"96","fix":"98"},"Update the dependencies array to be: [formSchema, userInfo]",{"range":"99","text":"100"},"Update the dependencies array to be: [classInfo, formSchema]",{"range":"101","text":"102"},{"range":"103","text":"102"},[2173,2183],"[formSchema, userInfo]",[2520,2531],"[classInfo, formSchema]",[2459,2470]]