[{"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\index.js":"1","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\App.js":"2","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\reportWebVitals.js":"3","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Home.js":"4","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\User.js":"5","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Login.js":"6","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Register.js":"7","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorHome.js":"8","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\NavBar.js":"9","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorDashboard.js":"10","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\EnrolledUsers.js":"11","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorCreateForm.js":"12","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\PrivateRoute.js":"13","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorUpdateForm.js":"14","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\TestData.js":"15","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\utils\\axiosWithAuth.js":"16","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorClass.js":"17","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\useDarkMode.js":"18","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\useLocalStorage.js":"19"},{"size":657,"mtime":1609741775429,"results":"20","hashOfConfig":"21"},{"size":1042,"mtime":1610165786156,"results":"22","hashOfConfig":"21"},{"size":375,"mtime":1608178925675,"results":"23","hashOfConfig":"21"},{"size":455,"mtime":1609882175062,"results":"24","hashOfConfig":"21"},{"size":118,"mtime":1609882175082,"results":"25","hashOfConfig":"21"},{"size":6636,"mtime":1609992272883,"results":"26","hashOfConfig":"21"},{"size":5908,"mtime":1609912506791,"results":"27","hashOfConfig":"21"},{"size":1331,"mtime":1609912506789,"results":"28","hashOfConfig":"21"},{"size":924,"mtime":1610165982536,"results":"29","hashOfConfig":"21"},{"size":3477,"mtime":1610070765920,"results":"30","hashOfConfig":"21"},{"size":2451,"mtime":1610071537168,"results":"31","hashOfConfig":"21"},{"size":9718,"mtime":1609984363746,"results":"32","hashOfConfig":"21"},{"size":466,"mtime":1608260585323,"results":"33","hashOfConfig":"21"},{"size":10533,"mtime":1609984363746,"results":"34","hashOfConfig":"21"},{"size":840,"mtime":1609741775421,"results":"35","hashOfConfig":"21"},{"size":375,"mtime":1609984363746,"results":"36","hashOfConfig":"21"},{"size":4463,"mtime":1609992272881,"results":"37","hashOfConfig":"21"},{"size":598,"mtime":1610232025435,"results":"38","hashOfConfig":"21"},{"size":611,"mtime":1610165456698,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"119rrdn",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\index.js",[],["83","84"],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\App.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\reportWebVitals.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Home.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\User.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Login.js",["85"],"import React,{useState,useEffect} from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {Form,Input,Label,FormGroup,Button } from 'reactstrap';\r\nimport { axiosWithAuth } from '../utils/axiosWithAuth';\r\nimport { gsap } from \"gsap\";\r\nimport * as yup from \"yup\";\r\nimport { Spinner } from 'reactstrap';\r\n\r\nexport default function Login({setLoginInfo}) {\r\n    \r\n    const history=useHistory();\r\n \r\n    const [loginData,setLoginData]=useState({\r\n      username:\"\",\r\n      password:\"\",\r\n      role:\"\",\r\n    }); \r\n\r\n   //animation on register form whenever rendered\r\n   useEffect(()=>{\r\n    gsap.from(\".ins-dashboard\",{x:10,duration: 1,ease:\"slow\"})\r\n  },[]);\r\n\r\n    const [loading,setLoading]=useState(false);\r\n    const[error,setError] =useState(null);\r\n\r\n     // managing state for yup validation errors.  \r\n     const [errors, setErrors] = useState({\r\n      username:\"\",\r\n      password:\"\",\r\n      role:\"\",\r\n    });\r\n  \r\n    const handleChange=(e)=>{\r\n      e.persist();       \r\n        const newLoginData = {\r\n            ...loginData,\r\n            [e.target.name]:e.target.value\r\n          };\r\n          console.log('After validate loginData=',loginData);\r\n          validateChange(e); // for each change in input, do inline validation\r\n          console.log('After validate err State=', errors)\r\n          setLoginData(newLoginData); // update state with new data\r\n    }\r\n\r\n  \r\n    // control whether or not the form can be submitted if there are errors in form validation (in the useEffect)\r\n    const [buttonIsDisabled, setButtonIsDisabled] = useState(true);\r\n\r\n  //inline validation of one key-value pair at a time with yup\r\n  const validateChange =(e)=>{\r\n    yup.reach(formSchema, e.target.name)\r\n    .validate(e.target.value)\r\n    .then((valid) => {\r\n      // the reset of that input's error\r\n      console.log(\"valid here\", e.target.name);\r\n      setErrors({ ...errors, [e.target.name]: \"\" });\r\n    })\r\n    .catch((err) => {\r\n      // the input is breaking form schema\r\n      console.log(\"err here\", err);\r\n      setErrors({ ...errors, [e.target.name]: err.errors[0] });\r\n    });\r\n }\r\n\r\n   // whenever state updates, validate the entire form.\r\n // if valid, then change button to be enabled.\r\n useEffect(() => {\r\n   formSchema.isValid(loginData).then((valid) => {\r\n     console.log(\"is my form valid?\", valid);\r\n\r\n     // valid is a boolean \r\n     setButtonIsDisabled(!valid);\r\n   });\r\n },[loginData]);\r\n\r\n   // Add a schema, used for all validation to determine whether the input is valid or not\r\n const formSchema = yup.object().shape({\r\n   username: yup.string()\r\n   .min(4,\"Please enter name of atleast 4 characters\")\r\n   .required(\"Name is required\"),\r\n   \r\n   password: yup.string()\r\n   .min(5,\"Please enter password of atleast 5 characters\")\r\n   .required(\"Please enter Password\"),\r\n\r\n   role: yup.string()\r\n   .oneOf([\"client\",\"instructor\"],\"Please choose Client or Instructor\")\r\n   .required(\"Please enter role!\"),\r\n  });\r\n\r\n    const handleSubmit=(e)=>{\r\n      e.preventDefault();\r\n      setLoading(true);\r\n        postLogin();\r\n    }\r\n\r\n    const postLogin=()=>{\r\n      const loginPayload={\r\n        username: loginData.username,\r\n        password:loginData.password}\r\n      axiosWithAuth()  \r\n          .post(`/api/auth/login`,loginPayload)\r\n          .then((res)=>{\r\n            console.log('Response back from reqres role:',res.data)\r\n            localStorage.setItem('token', res.data.token)\r\n            setLoading(false);\r\n            // setLoginInfo(res.data.message)\r\n            //route to client or instructor dashboard\r\n            const loginRoute = loginData.role === \"client\" ? `/user/dashboard/${res.data.id}` :`/instructor/dashboard/${res.data.id}`\r\n            history.push(loginRoute);\r\n            //clear server error\r\n            // setError(null);      \r\n          })\r\n      .catch(err=>{\r\n        console.log('error in loginData call',err);\r\n        setLoading(false);\r\n        setError(\"Invalid Login name or Password\");\r\n        console.log('Login Failed for the User:',loginData.username);\r\n      })\r\n    }\r\n  \r\n    const routeToRegister=(e)=>{\r\n       history.push('/signup');\r\n    }\r\n \r\nreturn (\r\n    <>\r\n    {error ? <div className=\"error p-4 text-center\">\r\n      <p>Oops something went wrong!</p>\r\n      <h6>Login Failed for the User: {loginData.username}</h6>\r\n    </div> :\r\n    <>\r\n       {loading ? \r\n       <div className=\"login-form\" >\r\n        <h4>Loading...Please wait <Spinner color=\"primary\" /> </h4>\r\n       </div>: \r\n    <div>   \r\n    <Form className=\"login-form\"  \r\n      onSubmit={handleSubmit}\r\n      name=\"login\"\r\n      >\r\n       <h2 className=\"text-center\">Welcome !</h2>\r\n       <FormGroup className=\"text-left\">\r\n        <Label htmlFor=\"username\"><b> UserName</b> </Label>\r\n        <Input type=\"text\"\r\n        id=\"username\"\r\n        name=\"username\"\r\n        value={loginData.username}\r\n        onChange={handleChange}\r\n        placeholder=\"Enter your email\"\r\n        />\r\n        {errors.username.length > 0 ? <p className=\"error\">{errors.username}</p> : null}\r\n        </FormGroup>\r\n\r\n        <FormGroup className=\"text-left\">\r\n        <Label htmlFor=\"password\"><b> Password</b> </Label>\r\n        <Input type=\"password\"\r\n        id=\"password\"\r\n        name=\"password\"\r\n        value={loginData.password}\r\n        onChange={handleChange}\r\n        placeholder=\"Password\"\r\n        />\r\n        {errors.password.length > 0 ? <p className=\"error\">{errors.password}</p> : null}\r\n        </FormGroup>\r\n        <FormGroup className=\"text-left\">\r\n        <Label htmlFor=\"role\"> <b>Role</b>\r\n            <select \r\n            id=\"role\"\r\n            name=\"role\"\r\n            value={loginData.role}\r\n            onChange={handleChange}\r\n            className=\"mt-2 ml-2\"\r\n            >\r\n            <option value=\"\">***Client or Instructor?***</option>\r\n            <option value=\"client\">Client</option>  \r\n            <option value=\"instructor\">Instructor</option>    \r\n            </select>\r\n        </Label>\r\n        {errors.role.length > 0 ? <p className=\"error\">{errors.role}</p> : null}\r\n        </FormGroup>\r\n      \r\n       <Button className=\"btn-lg btn-block ml-2\"\r\n       type=\"submit\"\r\n       color=\"primary\"\r\n       disabled={buttonIsDisabled}\r\n       >Log in</Button>\r\n        <p className=\"pt-4\">Haven't registered yet?\r\n        <Button \r\n        className=\"ml-3 btn-dark \"\r\n        onClick={routeToRegister}\r\n         >Register</Button>\r\n         </p>\r\n       \r\n        <div className=\"text-center p-2\">\r\n          <a href=\"/forgot-password\">Click here Forgot Password?</a>\r\n        </div>\r\n    </Form>\r\n    </div>\r\n    }\r\n  </>\r\n  }\r\n    </>   \r\n)\r\n\r\n}","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Register.js",["86"],"import React,{useState,useEffect} from 'react';\r\nimport '../App.css';\r\nimport {Button,Form,FormGroup,Label,Input} from 'reactstrap';  \r\nimport axios from \"axios\";\r\nimport * as yup from \"yup\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Register({setLoginInfo}) {\r\n    const history=useHistory();\r\n\r\n    const [userInfo, setUserInfo]=useState({\r\n        username:\"\",\r\n        password:\"\",\r\n        role:\"\",\r\n    })\r\n     \r\n      // managing state for errors.  \r\n      const [errors, setErrors] = useState({\r\n        username:\"\",\r\n        password:\"\",\r\n        role:\"\",\r\n      });\r\n\r\n    // server error\r\n    const [serverError, setServerError] = useState(\"\");\r\n\r\n    // control whether or not the form can be submitted if there are errors in form validation (in the useEffect)\r\n    const [buttonIsDisabled, setButtonIsDisabled] = useState(true);\r\n\r\n    const handleChange=(e)=>{\r\n        e.persist();\r\n        const newUserInfo = {\r\n            ...userInfo,\r\n            [e.target.name]:e.target.value\r\n          };\r\n          console.log('After validate userInfo=',userInfo);\r\n          validateChange(e); // for each change in input, do inline validation\r\n          console.log('After validate err State=', errors)\r\n          setUserInfo(newUserInfo); // update state with new data\r\n    }\r\n\r\n    \r\n  //inline validation of one key-value pair at a time with yup\r\n  const validateChange =(e)=>{\r\n     yup.reach(formSchema, e.target.name)\r\n     .validate(e.target.value)\r\n     .then((valid) => {\r\n       // the input is passing!\r\n       // the reset of that input's error\r\n       console.log(\"valid here\", e.target.name);\r\n       setErrors({ ...errors, [e.target.name]: \"\" });\r\n     })\r\n     .catch((err) => {\r\n       // the input is breaking form schema\r\n       console.log(\"err here\", err);\r\n       setErrors({ ...errors, [e.target.name]: err.errors[0] });\r\n     });\r\n  }\r\n\r\n    // whenever state updates, validate the entire form.\r\n  // if valid, then change button to be enabled.\r\n  useEffect(() => {\r\n    formSchema.isValid(userInfo).then((valid) => {\r\n      console.log(\"is my form valid?\", valid);\r\n\r\n      // valid is a boolean \r\n      setButtonIsDisabled(!valid);\r\n    });\r\n  },[userInfo]);\r\n\r\n    // Add a schema, used for all validation to determine whether the input is valid or not\r\n  const formSchema = yup.object().shape({\r\n    username: yup.string()\r\n    .min(4,\"Please enter name of atleast 4 characters\")\r\n    .required(\"Name is required\"),\r\n    \r\n    password: yup.string()\r\n    .min(5,\"Please enter password of atleast 5 characters\")\r\n    .required(\"Please enter Password\"),\r\n\r\n    role: yup.string()\r\n    .oneOf([\"client\",\"instructor\"],\"Please choose Client or Instructor\")\r\n    .required(\"Please enter role!\"),\r\n   });\r\n\r\n    const handleSubmit=(e)=>{\r\n        console.log('userInfo in submit',userInfo)\r\n        e.preventDefault();\r\n        callPost();           \r\n      }\r\n    const baseURL= \"https://anywherefitness187.herokuapp.com\"\r\n\r\n      function callPost(){\r\n         axios\r\n          //to be replaced with fitness api from backend\r\n          .post(`${baseURL}/api/auth/register`, userInfo)\r\n          .then((res)=>{\r\n              //update the stored post - with response from api\r\n              console.log('Response back from reqres:',res.data)\r\n              window.localStorage.setItem('token', res.data.token)\r\n              console.log('role=',res.data.cred.role);\r\n              console.log('id=',res.data.data.slice(3));\r\n              const userId=res.data.data.slice(3);\r\n             //route to client or instructor dashboard\r\n                const signUpRoute = res.data.cred.role === \"client\" ? `/user/dashboard/${userId}` :`/instructor/dashboard/${userId}`\r\n                history.push(signUpRoute);\r\n             //clear server error\r\n              //  setServerError(null);\r\n          })\r\n          .catch((err)=>{\r\n            console.log('server erro in post',err)\r\n            setServerError(\"oops! Looks like server side error!\");\r\n          })\r\n      }\r\n  \r\n\r\n  return (\r\n    <>\r\n    <Form className=\"register-form\"\r\n         onSubmit={handleSubmit}\r\n         name=\"register\">\r\n      {serverError && <p className=\"error\">{serverError}</p>}\r\n       <h2 className=\"text-center\">Please Register!</h2>\r\n\r\n       <FormGroup className=\"text-left\">\r\n\r\n        <Label htmlFor=\"userName\">Name </Label>     \r\n        <Input type=\"text\"\r\n        id=\"username\"\r\n        name=\"username\"\r\n        value={userInfo.username}\r\n        onChange={handleChange}\r\n        placeholder=\"Enter your Name\"\r\n        />\r\n        {errors.username.length > 0 ? <p className=\"error\">{errors.username}</p> : null}\r\n        </FormGroup>\r\n        \r\n        <FormGroup className=\"text-left\">\r\n        <Label htmlFor=\"password\"> Password  </Label>\r\n        <Input type=\"password\"\r\n        id=\"password\"\r\n        name=\"password\"\r\n        value={userInfo.password}\r\n        onChange={handleChange}\r\n        placeholder=\"Password\"\r\n        />\r\n        {errors.password.length > 0 ? <p className=\"error\">{errors.password}</p> : null}\r\n        </FormGroup>\r\n \r\n        <FormGroup className=\"text-left\">\r\n        <Label htmlFor=\"role\" > Role\r\n            <select \r\n            id=\"role\"\r\n            name=\"role\"\r\n            value={userInfo.role}\r\n            onChange={handleChange}\r\n            className=\"mt-2 ml-2\"\r\n            >\r\n            <option value=\"\">***Please Choose One!***</option>\r\n            <option value=\"client\">Client</option>  \r\n            <option value=\"instructor\">Instructor</option>    \r\n            </select>\r\n            {errors.role.length > 0 ? <p className=\"error\">{errors.role}</p> : null}\r\n        </Label>\r\n        </FormGroup>\r\n\r\n       <Button className=\"btn-lg btn-block\"\r\n       color=\"primary\"\r\n       type=\"submit\"\r\n       disabled={buttonIsDisabled}\r\n       >Register</Button>\r\n    </Form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorHome.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\NavBar.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorDashboard.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\EnrolledUsers.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorCreateForm.js",["87"],"import React,{useState,useEffect} from 'react';\r\nimport {useHistory,useParams} from 'react-router-dom';\r\nimport { Form,FormGroup,Input,Label,Button,Badge} from 'reactstrap';\r\nimport * as yup from \"yup\";\r\nimport { axiosWithAuth } from '../../utils/axiosWithAuth';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { gsap } from \"gsap\";\r\n\r\nfunction InstructorCreate(){\r\n    const history=useHistory();\r\n    const params=useParams();\r\n     \r\n    const [classInfo, setClassInfo]=useState({\r\n        // class_id:Date.now(),\r\n        class_name:\"\",\r\n        class_type:\"\",\r\n        class_intensity:\"\",\r\n        class_location:\"\",\r\n        start_time:\"\",\r\n        class_duration:\"\",\r\n        class_max_size:30,\r\n    })\r\n\r\n     //animation on create form whenever rendered\r\n     useEffect(()=>{\r\n      gsap.from(\".ins_create\",{x:10,duration: 1,ease:\"slow\"})\r\n    },[]);\r\n\r\n\r\n    //setup Modal\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () =>{\r\n        setShow(false); \r\n        history.push(`/instructor/dashboard/${params.userid}`)\r\n        // const newList=classList.filter(e=>e.id !== item.id)\r\n        // console.log('newList in delete=',newList);\r\n        // setClassList(newList);\r\n    } \r\n\r\n    const handleShow = () => setShow(true);\r\n\r\n    // control whether or not the form can be submitted if there are errors in form validation (in the useEffect)\r\n    const [buttonIsDisabled, setButtonIsDisabled] = useState(true);\r\n\r\n    // server error\r\n    const [serverError, setServerError] = useState(\"\");\r\n\r\n    // managing state for errors. empty unless inline validation (validateInput) updates key/value pair to have error\r\n      const [errors, setErrors] = useState({\r\n        class_name:\"\",\r\n        class_type:\"\",\r\n        class_intensity:\"\",\r\n        class_location:\"\",\r\n        start_time:\"\",\r\n        class_duration:\"\",\r\n        class_max_size:\"\",\r\n      });\r\n\r\n      const handleChange=(e)=>{\r\n        e.persist();\r\n        const newClassInfo = {\r\n            ...classInfo,\r\n            [e.target.name]:e.target.value\r\n          };\r\n          validateChange(e); // for each change in input, do inline validation\r\n          console.log('After validate err State=', errors)\r\n          setClassInfo(newClassInfo); // update state with new data\r\n    }\r\n\r\n    //inline validation of one key-value pair at a time with yup\r\n  const validateChange =(e)=>{\r\n    yup.reach(formSchema, e.target.name)\r\n    .validate(e.target.value)\r\n    .then((valid) => {\r\n      // the input is passing ! & reset of that input's error\r\n      console.log(\"valid here\", e.target.name);\r\n      setErrors({ ...errors, [e.target.name]: \"\" });\r\n    })\r\n    .catch((err) => {\r\n      // the input is breaking form schema\r\n      console.log(\"err here\", err);\r\n      setErrors({ ...errors, [e.target.name]: err.errors[0] });\r\n    });\r\n }\r\n\r\n  // whenever state updates, validate the entire form.\r\n  // if valid, then change button to be enabled.\r\n  useEffect(() => {\r\n    formSchema.isValid(classInfo).then((valid) => {\r\n      console.log(\"is my form valid?\", valid);\r\n      // valid is a boolean \r\n      setButtonIsDisabled(!valid);\r\n    });\r\n  }, [classInfo]);\r\n\r\n  // Schema, used for all validation to determine whether the input is valid or not\r\n  const formSchema = yup.object().shape({\r\n    class_name: yup.string()\r\n    .min(2,\"Please enter name of atleast 2 characters\")\r\n    .required(\"ClassName is required!\"),\r\n\r\n    class_type:yup.string()\r\n    .oneOf([\"Strength Training\",\"Spin Class\",\"Power Lift\",\"Yoga\",\"Pilates\",\"Weight Lifting\"])\r\n    .required(\"Choose Type is required,please choose one!\"),\r\n\r\n    class_intensity: yup.string()\r\n    .oneOf([\"Beginner\",\"Intermediate\",\"Advanced\"])\r\n    .required(\"Please choose one\"),\r\n\r\n    class_location: yup.string().required(\"Location is required!\"),\r\n\r\n    start_time: yup.string().required(\"date & time is required!\"),\r\n\r\n    class_duration:yup.string().required(\"Duration is required!\"),\r\n    \r\n    class_max_size:yup.number()\r\n    .max(30,\"Max class size allowed is 30\")\r\n    .required(\"Maxsize is required!\"),\r\n  });\r\n\r\n  const handleSubmit=(e)=>{\r\n    e.preventDefault();\r\n    console.log('on submit=',classInfo)\r\n    axiosWithAuth()  \r\n          .post(`/api/users/${params.userid}/class`,classInfo)\r\n          .then((res)=>{\r\n            console.log('Response back from reqres:',res.data)\r\n            handleShow();\r\n            // setClassList([...classList,res.data])\r\n            //clear server error\r\n            // setServerError(null);      \r\n          })\r\n          .catch((err)=>{\r\n            console.log('server erro in post',err)\r\n            setServerError(\"oops! Looks like server side error!\");\r\n          })        \r\n  }\r\n  const handleBack=()=>{\r\n    history.push(`/instructor/dashboard/${params.userid}`)\r\n  }\r\n\r\nreturn(\r\n    <>\r\n    {show ?\r\n    <Modal show={show} onHide={handleClose}  \r\n    backdrop=\"static\"\r\n    keyboard={false}\r\n    size=\"lg\"\r\n    aria-labelledby=\"contained-modal-title-vcenter\"\r\n    centered>\r\n        <Modal.Header closeButton>\r\n        <Modal.Title>Yay! You have successfully created your class<h3>{classInfo.class_name}!</h3></Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body> <h4>Thank you!</h4></Modal.Body>\r\n        <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={handleClose}>\r\n        Close\r\n        </Button>\r\n        </Modal.Footer>\r\n    </Modal> :   \r\n    <div>\r\n    <h3><Badge color=\"primary\">Create new Class here!</Badge></h3>\r\n    <div className=\"ins_create\">\r\n        <Form onSubmit={handleSubmit}\r\n         name=\"inscreate\">\r\n        {serverError && <p className=\"error\">{serverError}</p>}\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_name\"><b>Class Name</b></Label>\r\n            <Input name=\"class_name\"\r\n            id=\"class_name\"\r\n            value={classInfo.class_name}\r\n            onChange={handleChange}\r\n            placeholder=\"Burn With us!\"/>\r\n             {errors.class_name.length > 0 ? <p className=\"error\">{errors.class_name}</p> : null}\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_type\"><b>Class Type</b></Label>\r\n            <Input\r\n            name=\"class_type\"\r\n            type=\"select\"\r\n            id=\"class_type\"\r\n            value={classInfo.class_type}\r\n            onChange={handleChange}>\r\n            <option value=\"\">***Please Choose One!***</option>\r\n            <option value=\"Strength Training\">Strength Training</option>\r\n            <option value=\"Spin Class\">Spin Class</option>\r\n            <option value=\"Power Lift\">Power Lift</option>\r\n            <option value=\"Yoga\">Yoga</option>\r\n            <option value=\"Pilates\">Pilates</option>\r\n            </Input> \r\n            {errors.class_type.length > 0 ? <p className=\"error\">{errors.class_type}</p> : null}\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_intensity\"><b>Class Intensity</b></Label>\r\n            <Input\r\n            type=\"select\"\r\n            name=\"class_intensity\"\r\n            id=\"class_intensity\"\r\n            value={classInfo.class_intensity}\r\n            onChange={handleChange}>\r\n            <option value=\"\">***Please Choose One!***</option>\r\n            <option>Beginner</option>\r\n            <option>Intermediate</option>\r\n            <option>Advanced</option>\r\n            </Input> \r\n            {errors.class_intensity.length > 0 ? <p className=\"error\">{errors.class_intensity}</p> : null}\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_location\"><b>Class Location</b></Label>\r\n            <Input name=\"class_location\"\r\n            id=\"class_location\"\r\n            value={classInfo.class_location}\r\n            onChange={handleChange}\r\n            placeholder=\"Street,City,State,Zip\"/>\r\n            {errors.class_location > 0 ? <p className=\"error\">{errors.class_location}</p> : null}\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"start_time\"><b>Class Start Time</b></Label>\r\n            <Input name=\"start_time\"\r\n            id=\"start_time\"\r\n            type=\"datetime-local\"\r\n            value={classInfo.start_time}\r\n            onChange={handleChange}\r\n            placeholder=\"00:00\"/>\r\n            {errors.start_time > 0 ? <p className=\"error\">{errors.start_time}</p> : null}\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_duration\"><b>Class Duration(minutes)</b></Label>\r\n            <Input name=\"class_duration\"\r\n            id=\"class_duration\"\r\n            value={classInfo.class_duration}\r\n            type=\"Number\"\r\n            onChange={handleChange}\r\n            placeholder=\"30minutes\"/>\r\n            {errors.class_duration > 0 ? <p className=\"error\">{errors.class_duration}</p> : null}\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_max_size\"><b>Class Max Size</b></Label>\r\n            <Input name=\"class_max_size\"\r\n            id=\"class_max_size\"\r\n            type=\"number\"\r\n            min=\"3\"\r\n            max=\"30\"\r\n            value={classInfo.class_max_size}\r\n            onChange={handleChange}\r\n            />\r\n            {errors.class_max_size.length > 0 ? <p className=\"error\">{errors.class_max_size}</p> : null}\r\n\r\n            </FormGroup>\r\n            <Button color=\"success\"\r\n            className=\"btn-lg  btn-block ml-1\"\r\n            type=\"submit\"\r\n            disabled={buttonIsDisabled}>Create Class</Button>\r\n            \r\n            <Button color=\"warning\"\r\n            className=\"btn-lg  btn-block ml-1\"\r\n            onClick={handleBack}>Go Back</Button>\r\n        </Form>\r\n    </div>\r\n    </div>\r\n    }   \r\n    </>\r\n)\r\n}\r\n\r\nexport default InstructorCreate;\r\n\r\n\r\n ","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\PrivateRoute.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorUpdateForm.js",["88","89"],"import React,{useState,useEffect} from 'react';\r\nimport {useHistory,useParams} from 'react-router-dom';\r\nimport { Form,FormGroup,Input,Label,Button} from 'reactstrap';\r\nimport * as yup from \"yup\";\r\nimport { axiosWithAuth } from '../../utils/axiosWithAuth';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nfunction InstructorUpdateForm(){\r\n    const [updated,setUpdated]=useState(false);\r\n    const history=useHistory();\r\n    const params = useParams(); \r\n    console.log('params.userid in updateform=',params.userid)\r\n    console.log('params.classid in updateform=',params.classid)\r\n       //setup Modal\r\n       const [show, setShow] = useState(false);\r\n\r\n      const handleClose = () =>{\r\n      setShow(false);\r\n      history.push(`/instructor/dashboard/${params.userid}`)\r\n       } \r\n\r\n      const handleShow = () => setShow(true);\r\n\r\n      const [classInfo, setClassInfo]=useState({\r\n        class_name:\"\",\r\n        class_intensity: \"\",\r\n        class_location: \"\",\r\n        class_max_size: \"\",\r\n        class_duration:\"\",\r\n        class_type: \"\",\r\n        start_time: \"\",\r\n      }) \r\n\r\n    // set classInfo by getting the class of that instructor id\r\n useEffect(()=>{\r\n  axiosWithAuth()\r\n  .get(`/api/users/${params.userid}/class`)\r\n  .then(res=>{\r\n      console.log('res in get class:',res)\r\n      if (res.data.length !== 0){\r\n          const updateClass=res.data.find(item=>item.id === Number(params.classid));\r\n          setClassInfo(updateClass)\r\n       }\r\n  })\r\n  .catch(err=>{\r\n      console.log('err in get class',err)\r\n  })\r\n  //has to be id\r\n  },[params.userid,updated])\r\n\r\n  \r\n    // control whether or not the form can be submitted if there are errors in form validation (in the useEffect)\r\n    const [buttonIsDisabled, setButtonIsDisabled] = useState(true);\r\n\r\n    // server error\r\n    const [serverError, setServerError] = useState(\"\");\r\n\r\n    // managing state for errors. empty unless inline validation (validateInput) updates key/value pair to have error\r\n      const [errors, setErrors] = useState({\r\n        class_name:\"\",\r\n        class_type:\"\",\r\n        class_intensity:\"\",\r\n        class_location:\"\",\r\n        start_time:\"\",\r\n        class_duration:\"\",\r\n        class_max_size:\"\",\r\n      });\r\n\r\n      const handleChange=(e)=>{\r\n        e.persist();\r\n        const newClassInfo = {\r\n            ...classInfo,\r\n            [e.target.name]:e.target.value\r\n          };\r\n          validateChange(e); // for each change in input, do inline validation\r\n          console.log('After validate err State=', errors)\r\n          setClassInfo(newClassInfo); // update state with new data\r\n    }\r\n\r\n    //inline validation of one key-value pair at a time with yup\r\n  const validateChange =(e)=>{\r\n    yup.reach(formSchema, e.target.name)\r\n    .validate(e.target.value)\r\n    .then((valid) => {\r\n      // the input is passing ! & reset of that input's error\r\n      console.log(\"valid here\", e.target.name);\r\n      setErrors({ ...errors, [e.target.name]: \"\" });\r\n    })\r\n    .catch((err) => {\r\n      // the input is breaking form schema\r\n      console.log(\"err here\", err);\r\n      setErrors({ ...errors, [e.target.name]: err.errors[0] });\r\n    });\r\n }\r\n\r\n  // whenever state updates, validate the entire form.\r\n  // if valid, then change button to be enabled.\r\n  useEffect(() => {\r\n    formSchema.isValid(classInfo).then((valid) => {\r\n      console.log(\"is my form valid?\", valid);\r\n      // valid is a boolean \r\n      setButtonIsDisabled(!valid);\r\n    });\r\n  }, [classInfo]);\r\n\r\n  // Add a schema, used for all validation to determine whether the input is valid or not\r\n  const formSchema = yup.object().shape({\r\n    class_name: yup.string()\r\n    .min(2,\"Please enter name of atleast 2 characters\")\r\n    .required(\"ClassName is required!\"),\r\n\r\n    class_type:yup.string()\r\n    .oneOf([\"Strength Training\",\"Spin Class\",\"Power Lift\",\"Yoga\",\"Pilates\",\"Weight Lifting\"])\r\n    .required(\"Choose Type is required,please choose one!\"),\r\n\r\n    class_intensity: yup.string()\r\n    .oneOf([\"Beginner\",\"Intermediate\",\"Advanced\"])\r\n    .required(\"Please choose one\"),\r\n\r\n    class_location: yup.string().required(\"Location is required!\"),\r\n\r\n    start_time: yup.string().required(\"date & time is required!\"),\r\n\r\n    class_duration:yup.string().required(\"Duration is required!\"),\r\n    \r\n    class_max_size:yup.number()\r\n    .max(30,\"Max class size allowed is 30\")\r\n    .required(\"Maxsize is required!\"),\r\n  });\r\n\r\n  const handleSubmit=(e)=>{\r\n    e.preventDefault();\r\n    console.log('on submit=',classInfo)\r\n    const updatedClassInfo= {\r\n        class_name:classInfo.class_name,\r\n        class_intensity: classInfo.class_intensity,\r\n        class_location: classInfo.class_location,\r\n        class_max_size: classInfo.class_max_size,\r\n        class_duration: classInfo.class_duration,\r\n        class_type: classInfo.class_type,\r\n        start_time: classInfo.start_time,\r\n        }; \r\n\r\n      console.log('updated class=',updatedClassInfo)\r\n    axiosWithAuth() \r\n          .put(`/api/class/${classInfo.id}`, updatedClassInfo)\r\n          .then((res)=>{\r\n            console.log('Response back from reqres:',res.data)\r\n            setUpdated(true);\r\n            // setClassList([...classList,res.data])\r\n            handleShow();\r\n            // history.push(`/instructor/dashboard/${params.userid}`)\r\n            //clear server error\r\n            setServerError(null);      \r\n          })\r\n          .catch((err)=>{\r\n            console.log('server erro in post',err)\r\n            setServerError(\"oops! Looks like server side error!\");\r\n          }) \r\n          \r\n  }\r\n\r\n  const handleBack=()=>{\r\n    history.push(`/instructor/dashboard/${params.userid}`)\r\n  }\r\nreturn(\r\n    <>\r\n    <h3>Update your class : {classInfo.class_name}!</h3>\r\n    {show ?\r\n    <Modal show={show} onHide={handleClose}  \r\n    backdrop=\"static\"\r\n    keyboard={false}\r\n    size=\"lg\"\r\n    aria-labelledby=\"contained-modal-title-vcenter\"\r\n    centered>\r\n        <Modal.Header closeButton>\r\n        <Modal.Title><h3>Dear {classInfo.username}!</h3></Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body><h4>Your class is Updated now,Enjoy fitness anywhere!</h4><h3>{classInfo.class_name}</h3> </Modal.Body>\r\n        <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={handleClose}>\r\n        Close\r\n        </Button>\r\n        </Modal.Footer>\r\n    </Modal> :\r\n    <div className=\"ins_create\">\r\n        <Form onSubmit={handleSubmit}\r\n         name=\"inscreate\">\r\n        {serverError && <p className=\"error\">{serverError}</p>}\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_name\"><b>Class Name</b></Label>\r\n            <Input name=\"class_name\"\r\n            id=\"class_name\"\r\n            value={classInfo.class_name}\r\n            onChange={handleChange}\r\n            placeholder=\"Burn With us!\"/>\r\n             {errors.class_name.length > 0 ? <p className=\"error\">{errors.class_name}</p> : null}\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_type\"><b>Class Type</b></Label>\r\n            <Input\r\n            name=\"class_type\"\r\n            type=\"select\"\r\n            id=\"class_type\"\r\n            value={classInfo.class_type}\r\n            onChange={handleChange}>\r\n            <option value=\"\">***Please Choose One!***</option>\r\n            <option>Strength Training</option>\r\n            <option>Spin Class</option>\r\n            <option>Power Lift</option>\r\n            <option>Yoga</option>\r\n            <option>Pilates</option>\r\n            <option>Weight Lifting</option>\r\n            </Input> \r\n            {errors.class_type.length > 0 ? <p className=\"error\">{errors.class_type}</p> : null}\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_intensity\"><b>Class Intensity</b></Label>\r\n            <Input\r\n            type=\"select\"\r\n            name=\"class_intensity\"\r\n            id=\"class_intensity\"\r\n            value={classInfo.class_intensity}\r\n            onChange={handleChange}>\r\n            <option value=\"\">***Please Choose One!***</option>\r\n            <option>Beginner</option>\r\n            <option>Intermediate</option>\r\n            <option>Advanced</option>\r\n            </Input> \r\n            {errors.class_intensity.length > 0 ? <p className=\"error\">{errors.class_intensity}</p> : null}\r\n            </FormGroup>\r\n \r\n            <FormGroup>\r\n            <Label htmlFor=\"class_location\"><b>Class Location</b></Label>\r\n            <Input name=\"class_location\"\r\n            id=\"class_location\"\r\n            value={classInfo.class_location}\r\n            onChange={handleChange}\r\n            placeholder=\"Street,City,State,Zip\"/>\r\n             {errors.class_location.length > 0 ? <p className=\"error\">{errors.class_location}</p> : null}\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"start_time\"><b>Class Start Time</b></Label>\r\n            <Input name=\"start_time\"\r\n            id=\"start_time\"\r\n            type=\"datetime-local\"\r\n            value={classInfo.start_time}\r\n            onChange={handleChange}\r\n            placeholder=\"00:00\"/>\r\n             {errors.start_time.length > 0 ? <p className=\"error\">{errors.start_time}</p> : null}\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_duration\"><b>Class Duration(mins)</b></Label>\r\n            <Input name=\"class_duration\"\r\n            id=\"class_duration\"\r\n            value={classInfo.class_duration}\r\n            onChange={handleChange}\r\n            type=\"number\"\r\n            placeholder=\"45\"/>\r\n             {errors.class_duration.length > 0 ? <p className=\"error\">{errors.class_duration}</p> : null}\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_max_size\"><b>Class Max Size</b></Label>\r\n            <Input name=\"class_max_size\"\r\n            id=\"class_max_size\"\r\n            type=\"number\"\r\n            min=\"3\"\r\n            max=\"50\"\r\n            value={classInfo.class_max_size}\r\n            onChange={handleChange}\r\n            />\r\n             {errors.class_max_size.length > 0 ? <p className=\"error\">{errors.class_max_size}</p> : null}\r\n            </FormGroup>\r\n            <Button color=\"success\"\r\n            className=\"btn-lg  btn-block\"\r\n            type=\"submit\"\r\n            disabled={buttonIsDisabled}>Update Class</Button>\r\n\r\n            <Button color=\"warning\"\r\n            className=\"btn-lg  btn-block\"\r\n            onClick={handleBack}\r\n            >Go Back</Button>\r\n        </Form>\r\n    </div>\r\n    }\r\n    </>\r\n)\r\n}\r\n\r\nexport default InstructorUpdateForm;\r\n\r\n\r\n ","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\TestData.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\utils\\axiosWithAuth.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorClass.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\useDarkMode.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\useLocalStorage.js",[],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":75,"column":4,"nodeType":"96","endLine":75,"endColumn":15,"suggestions":"97"},{"ruleId":"94","severity":1,"message":"95","line":69,"column":5,"nodeType":"96","endLine":69,"endColumn":15,"suggestions":"98"},{"ruleId":"94","severity":1,"message":"95","line":95,"column":6,"nodeType":"96","endLine":95,"endColumn":17,"suggestions":"99"},{"ruleId":"94","severity":1,"message":"100","line":49,"column":5,"nodeType":"96","endLine":49,"endColumn":28,"suggestions":"101"},{"ruleId":"94","severity":1,"message":"95","line":104,"column":6,"nodeType":"96","endLine":104,"endColumn":17,"suggestions":"102"},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formSchema'. Either include it or remove the dependency array.","ArrayExpression",["105"],["106"],["107"],"React Hook useEffect has a missing dependency: 'params.classid'. Either include it or remove the dependency array.",["108"],["109"],"no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"114","fix":"118"},"Update the dependencies array to be: [formSchema, loginData]",{"range":"119","text":"120"},"Update the dependencies array to be: [formSchema, userInfo]",{"range":"121","text":"122"},"Update the dependencies array to be: [classInfo, formSchema]",{"range":"123","text":"124"},"Update the dependencies array to be: [params.classid, params.userid, updated]",{"range":"125","text":"126"},{"range":"127","text":"124"},[2411,2422],"[formSchema, loginData]",[2201,2211],"[formSchema, userInfo]",[3149,3160],"[classInfo, formSchema]",[1558,1581],"[params.classid, params.userid, updated]",[3470,3481]]