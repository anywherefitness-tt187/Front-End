[{"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\index.js":"1","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\App.js":"2","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\reportWebVitals.js":"3","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\User.js":"4","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Register.js":"5","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Home.js":"6","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorHome.js":"7","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Login.js":"8","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\NavBar.js":"9","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\PrivateRoute.js":"10","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorCreateForm.js":"11","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorDashboard.js":"12","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorUpdateForm.js":"13","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\utils\\axiosWithAuth.js":"14","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorClass.js":"15","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\TestData.js":"16"},{"size":657,"mtime":1609452189714,"results":"17","hashOfConfig":"18"},{"size":1001,"mtime":1609653774673,"results":"19","hashOfConfig":"18"},{"size":375,"mtime":1608178925675,"results":"20","hashOfConfig":"18"},{"size":145,"mtime":1608260631413,"results":"21","hashOfConfig":"18"},{"size":5733,"mtime":1609392597230,"results":"22","hashOfConfig":"18"},{"size":436,"mtime":1609369508028,"results":"23","hashOfConfig":"18"},{"size":1393,"mtime":1609653715601,"results":"24","hashOfConfig":"18"},{"size":3754,"mtime":1609653746405,"results":"25","hashOfConfig":"18"},{"size":417,"mtime":1609452837054,"results":"26","hashOfConfig":"18"},{"size":466,"mtime":1608260585323,"results":"27","hashOfConfig":"18"},{"size":7995,"mtime":1609652393934,"results":"28","hashOfConfig":"18"},{"size":2350,"mtime":1609657296849,"results":"29","hashOfConfig":"18"},{"size":8328,"mtime":1609648868317,"results":"30","hashOfConfig":"18"},{"size":329,"mtime":1609223894684,"results":"31","hashOfConfig":"18"},{"size":3188,"mtime":1609657490918,"results":"32","hashOfConfig":"18"},{"size":840,"mtime":1609453853711,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"119rrdn",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\index.js",[],["69","70"],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\App.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\reportWebVitals.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\User.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Register.js",["71"],"import React,{useState,useEffect} from 'react';\r\nimport '../App.css';\r\nimport {Button,Form,FormGroup,Label,Input} from 'reactstrap';  \r\nimport axios from \"axios\";\r\nimport * as yup from \"yup\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Register({setLoginInfo}) {\r\n    const history=useHistory();\r\n\r\n    const [userInfo, setUserInfo]=useState({\r\n        username:\"\",\r\n        password:\"\",\r\n        role:\"\",\r\n    })\r\n\r\n    // server error\r\n    const [serverError, setServerError] = useState(\"\");\r\n\r\n    // control whether or not the form can be submitted if there are errors in form validation (in the useEffect)\r\n    const [buttonIsDisabled, setButtonIsDisabled] = useState(true);\r\n\r\n    // managing state for errors.  \r\n    const [errors, setErrors] = useState({\r\n      username:\"\",\r\n      password:\"\",\r\n      role:\"\",\r\n    });\r\n\r\n\r\n    const handleChange=(e)=>{\r\n        e.persist();\r\n        const newUserInfo = {\r\n            ...userInfo,\r\n            [e.target.name]:e.target.value\r\n          };\r\n          console.log('After validate userInfo=',userInfo);\r\n          validateChange(e); // for each change in input, do inline validation\r\n          console.log('After validate err State=', errors)\r\n          setUserInfo(newUserInfo); // update state with new data\r\n    }\r\n\r\n    \r\n  //inline validation of one key-value pair at a time with yup\r\n  const validateChange =(e)=>{\r\n     yup.reach(formSchema, e.target.name)\r\n     .validate(e.target.value)\r\n     .then((valid) => {\r\n       // the input is passing!\r\n       // the reset of that input's error\r\n       console.log(\"valid here\", e.target.name);\r\n       setErrors({ ...errors, [e.target.name]: \"\" });\r\n     })\r\n     .catch((err) => {\r\n       // the input is breaking form schema\r\n       console.log(\"err here\", err);\r\n       setErrors({ ...errors, [e.target.name]: err.errors[0] });\r\n     });\r\n  }\r\n\r\n    // whenever state updates, validate the entire form.\r\n  // if valid, then change button to be enabled.\r\n  useEffect(() => {\r\n    formSchema.isValid(userInfo).then((valid) => {\r\n      console.log(\"is my form valid?\", valid);\r\n\r\n      // valid is a boolean \r\n      setButtonIsDisabled(!valid);\r\n    });\r\n  }, [userInfo]);\r\n\r\n    // Add a schema, used for all validation to determine whether the input is valid or not\r\n  const formSchema = yup.object().shape({\r\n    username: yup.string()\r\n    .min(2,\"Please enter name of atleast 2 characters\")\r\n    .required(\"Name is required\"),\r\n    \r\n    password: yup.string()\r\n    .min(4,\"Please enter password of atleast 4 characters\")\r\n    .required(\"Please enter Password\"),\r\n\r\n    role: yup.string()\r\n    .required(\"Please enter role\"),\r\n   });\r\n\r\n    const handleSubmit=(e)=>{\r\n        console.log('userInfo in submit',userInfo)\r\n        e.preventDefault();\r\n        callPost();           \r\n      }\r\n    const baseURL= \"https://anywherefitness187.herokuapp.com\"\r\n\r\n      function callPost(){\r\n         axios\r\n          //to be replaced with fitness api from backend\r\n          .post(`${baseURL}/api/auth/register`, userInfo)\r\n          .then((res)=>{\r\n              //update the stored post - with response from api\r\n              console.log('Response back from reqres:',res.data)\r\n              localStorage.setItem('token', res.data.token)\r\n              console.log('role=',res.data.cred.role);\r\n              // setLogin(res.data.cred.username)\r\n             //route to client or instructor dashboard\r\n                const signupRoute = res.data.cred.role === \"client\" ? \"/user/dashboard\" :\"/instructor/dashboard\"\r\n                history.push(signupRoute);\r\n             //clear server error\r\n              //  setServerError(null);\r\n          })\r\n          .catch((err)=>{\r\n            console.log('server erro in post',err)\r\n            setServerError(\"oops! Looks like server side error!\");\r\n          })\r\n      }\r\n  \r\n\r\n  return (\r\n    <>\r\n    <Form className=\"register-form\"\r\n         onSubmit={handleSubmit}\r\n         name=\"register\">\r\n      {serverError && <p className=\"error\">{serverError}</p>}\r\n       <h2 className=\"text-center\">Please Register!</h2>\r\n\r\n       <FormGroup className=\"text-left\">\r\n\r\n        <Label htmlFor=\"userName\">Name </Label>     \r\n        <Input type=\"text\"\r\n        id=\"username\"\r\n        name=\"username\"\r\n        value={userInfo.username}\r\n        onChange={handleChange}\r\n        placeholder=\"Enter your Name\"\r\n        />\r\n        {errors.username.length > 0 ? <p className=\"error\">{errors.username}</p> : null}\r\n        </FormGroup>\r\n        \r\n        <FormGroup className=\"text-left\">\r\n        <Label htmlFor=\"password\"> Password  </Label>\r\n        <Input type=\"password\"\r\n        id=\"password\"\r\n        name=\"password\"\r\n        value={userInfo.password}\r\n        onChange={handleChange}\r\n        placeholder=\"Password\"\r\n        />\r\n        {errors.password.length > 0 ? <p className=\"error\">{errors.password}</p> : null}\r\n        </FormGroup>\r\n \r\n        <FormGroup className=\"text-left\">\r\n        <Label htmlFor=\"role\" > Role\r\n            <select \r\n            id=\"role\"\r\n            name=\"role\"\r\n            value={userInfo.role}\r\n            onChange={handleChange}\r\n            className=\"mt-2 ml-2\"\r\n            >\r\n            <option value=\"\">***Please Choose One!***</option>\r\n            <option value=\"client\">Client</option>  \r\n            <option value=\"instructor\">Instructor</option>    \r\n            </select>\r\n            {errors.role.length > 0 ? <p className=\"error\">{errors.role}</p> : null}\r\n        </Label>\r\n        </FormGroup>\r\n\r\n       <Button className=\"btn-lg btn-block\"\r\n       color=\"primary\"\r\n       type=\"submit\"\r\n       disabled={buttonIsDisabled}\r\n       >Register</Button>\r\n    </Form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Home.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorHome.js",["72"],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Login.js",["73","74"],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\NavBar.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\PrivateRoute.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorCreateForm.js",["75","76"],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorDashboard.js",["77"],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorUpdateForm.js",["78","79"],"import React,{useState,useEffect} from 'react';\r\nimport {useHistory,useParams} from 'react-router-dom';\r\nimport { Form,FormGroup,Input,Label,Button} from 'reactstrap';\r\nimport * as yup from \"yup\";\r\nimport { axiosWithAuth } from '../../utils/axiosWithAuth';\r\n \r\n\r\nfunction InstructorUpdateForm({classList,setClassList}){\r\n    const [updated,setUpdated]=useState(false);\r\n    const history=useHistory();\r\n    const params = useParams(); \r\n    console.log('params.userid in updateform=',params.userid)\r\n    console.log('params.classid in updateform=',params.classid)\r\n    // set classInfo by getting the class of that instructor id\r\n useEffect(()=>{\r\n  axiosWithAuth()\r\n  .get(`/api/users/${params.userid}/class`)\r\n  .then(res=>{\r\n      console.log('res in get class:',res)\r\n      if (res.data.length !== 0){\r\n          // const newList= res.data\r\n          // setClassList([...classList,...newList])\r\n          const updateClass=res.data.find(item=>item.id === Number(params.classid));\r\n          setClassInfo(updateClass)\r\n       }\r\n  })\r\n  .catch(err=>{\r\n      console.log('err in get class',err)\r\n  })\r\n  //has to be id\r\n  },[params.userid,updated])\r\n\r\n \r\n    const updateClass=classList.find(item=>item.id === Number(params.classid))\r\n    const [classInfo, setClassInfo]=useState(updateClass);\r\n    console.log('update classlist',classInfo);\r\n    // control whether or not the form can be submitted if there are errors in form validation (in the useEffect)\r\n    const [buttonIsDisabled, setButtonIsDisabled] = useState(true);\r\n\r\n    // server error\r\n    const [serverError, setServerError] = useState(\"\");\r\n\r\n    // managing state for errors. empty unless inline validation (validateInput) updates key/value pair to have error\r\n      const [errors, setErrors] = useState({\r\n        class_name:\"\",\r\n        class_type:\"\",\r\n        class_intensity:\"\",\r\n        class_location:\"\",\r\n        start_time:\"\",\r\n        class_duration:\"\",\r\n        class_max_size:\"\",\r\n      });\r\n\r\n      const handleChange=(e)=>{\r\n        e.persist();\r\n        const newClassInfo = {\r\n            ...classInfo,\r\n            [e.target.name]:e.target.value\r\n          };\r\n          validateChange(e); // for each change in input, do inline validation\r\n          console.log('After validate err State=', errors)\r\n          setClassInfo(newClassInfo); // update state with new data\r\n    }\r\n\r\n    //inline validation of one key-value pair at a time with yup\r\n  const validateChange =(e)=>{\r\n    yup.reach(formSchema, e.target.name)\r\n    .validate(e.target.value)\r\n    .then((valid) => {\r\n      // the input is passing ! & reset of that input's error\r\n      console.log(\"valid here\", e.target.name);\r\n      setErrors({ ...errors, [e.target.name]: \"\" });\r\n    })\r\n    .catch((err) => {\r\n      // the input is breaking form schema\r\n      console.log(\"err here\", err);\r\n      setErrors({ ...errors, [e.target.name]: err.errors[0] });\r\n    });\r\n }\r\n\r\n  // whenever state updates, validate the entire form.\r\n  // if valid, then change button to be enabled.\r\n  useEffect(() => {\r\n    formSchema.isValid(classInfo).then((valid) => {\r\n      console.log(\"is my form valid?\", valid);\r\n      // valid is a boolean \r\n      setButtonIsDisabled(!valid);\r\n    });\r\n  }, [classInfo]);\r\n\r\n  // Add a schema, used for all validation to determine whether the input is valid or not\r\n  const formSchema = yup.object().shape({\r\n    class_name: yup.string()\r\n    .min(2,\"Please enter name of atleast 2 characters\")\r\n    .required(\"ClassName is required!\"),\r\n   \r\n    class_type:yup.string().required(\"Choose Type is required!\"),\r\n\r\n    class_intensity: yup.string()\r\n    .oneOf([\"Beginner\",\"Intermediate\",\"Advanced\"])\r\n    .required(\"Please choose one\"),\r\n\r\n    class_location: yup.string().required(\"Location is required!\"),\r\n\r\n    start_time: yup.string().required(\"date & time is required!\"),\r\n\r\n    class_duration:yup.string().required(\"Duration is required!\"),\r\n    \r\n    class_max_size:yup.number().required(\"Maxsize is required!\")\r\n  });\r\n\r\n  const handleSubmit=(e)=>{\r\n    e.preventDefault();\r\n    console.log('on submit=',classInfo)\r\n    axiosWithAuth() \r\n          .put(`/api/class/${classInfo.id}`, classInfo)\r\n          .then((res)=>{\r\n            console.log('Response back from reqres:',res.data)\r\n            setUpdated(true);\r\n            // setClassList([...classList,res.data])\r\n            history.push(`/instructor/dashboard/${params.userid}`)\r\n            //clear server error\r\n            setServerError(null);      \r\n          })\r\n          .catch((err)=>{\r\n            console.log('server erro in post',err)\r\n            setServerError(\"oops! Looks like server side error!\");\r\n          }) \r\n          \r\n  }\r\n\r\n  const handleBack=()=>{\r\n    history.push(`/instructor/dashboard/${params.id}`)\r\n  }\r\nreturn(\r\n    <>\r\n    <h4>Update your class : {classInfo.class_name}!</h4>\r\n    <div className=\"ins_create\">\r\n        <Form onSubmit={handleSubmit}\r\n         name=\"inscreate\">\r\n        {serverError && <p className=\"error\">{serverError}</p>}\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_name\">Class Name</Label>\r\n            <Input name=\"class_name\"\r\n            id=\"class_name\"\r\n            value={classInfo.class_name}\r\n            onChange={handleChange}\r\n            placeholder=\"Burn With us!\"/>\r\n             {errors.class_name.length > 0 ? <p className=\"error\">{errors.class_name}</p> : null}\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_type\">Class Type</Label>\r\n            <Input\r\n            name=\"class_type\"\r\n            type=\"select\"\r\n            id=\"class_type\"\r\n            value={classInfo.class_type}\r\n            onChange={handleChange}>\r\n            <option value=\"\">***Please Choose One!***</option>\r\n            <option>Strength Training</option>\r\n            <option>Spin Class</option>\r\n            <option>Power Lift</option>\r\n            <option>Yoga</option>\r\n            <option>Pilates</option>\r\n            </Input> \r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_intensity\">Class Intensity</Label>\r\n            <Input\r\n            type=\"select\"\r\n            name=\"class_intensity\"\r\n            id=\"class_intensity\"\r\n            value={classInfo.class_intensity}\r\n            onChange={handleChange}>\r\n            <option value=\"\">***Please Choose One!***</option>\r\n            <option>Beginner</option>\r\n            <option>Intermediate</option>\r\n            <option>Advanced</option>\r\n            </Input> \r\n            </FormGroup>\r\n{/* q: backend, 4 fields for location? */}\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_location\">Class Location</Label>\r\n            <Input name=\"class_location\"\r\n            id=\"class_location\"\r\n            value={classInfo.class_location}\r\n            onChange={handleChange}\r\n            placeholder=\"Street,City,State,Zip\"/>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"start_time\">Class Start Time</Label>\r\n            <Input name=\"start_time\"\r\n            id=\"start_time\"\r\n            type=\"datetime-local\"\r\n            value={classInfo.start_time}\r\n            onChange={handleChange}\r\n            placeholder=\"00:00\"/>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_duration\">Class Duration</Label>\r\n            <Input name=\"class_duration\"\r\n            id=\"class_duration\"\r\n            value={classInfo.class_duration}\r\n            onChange={handleChange}\r\n            placeholder=\"30minutes\"/>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n            <Label htmlFor=\"class_max_size\">Class Max Size</Label>\r\n            <Input name=\"class_max_size\"\r\n            id=\"class_max_size\"\r\n            type=\"number\"\r\n            min=\"3\"\r\n            max=\"50\"\r\n            value={classInfo.class_max_size}\r\n            onChange={handleChange}\r\n            />\r\n            </FormGroup>\r\n            <Button color=\"success\"\r\n            className=\"btn-lg  btn-block\"\r\n            type=\"submit\"\r\n            disabled={buttonIsDisabled}>Update Class</Button>\r\n\r\n            <Button color=\"warning\"\r\n            className=\"btn-lg  btn-block\"\r\n            onClick={handleBack}\r\n            >Go Back</Button>\r\n        </Form>\r\n    </div>\r\n    </>\r\n)\r\n}\r\n\r\nexport default InstructorUpdateForm;\r\n\r\n\r\n ","C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\utils\\axiosWithAuth.js",[],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\InstructorClass.js",["80"],"C:\\Users\\vasan\\Documents\\mygithub\\Front-End-Anywherefitness\\src\\components\\Instructor\\TestData.js",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":70,"column":6,"nodeType":"87","endLine":70,"endColumn":16,"suggestions":"88"},{"ruleId":"89","severity":1,"message":"90","line":1,"column":24,"nodeType":"91","messageId":"92","endLine":1,"endColumn":33},{"ruleId":"89","severity":1,"message":"90","line":1,"column":24,"nodeType":"91","messageId":"92","endLine":1,"endColumn":33},{"ruleId":"89","severity":1,"message":"93","line":16,"column":11,"nodeType":"91","messageId":"92","endLine":16,"endColumn":16},{"ruleId":"89","severity":1,"message":"94","line":11,"column":24,"nodeType":"91","messageId":"92","endLine":11,"endColumn":38},{"ruleId":"85","severity":1,"message":"86","line":75,"column":6,"nodeType":"87","endLine":75,"endColumn":17,"suggestions":"95"},{"ruleId":"85","severity":1,"message":"96","line":33,"column":7,"nodeType":"87","endLine":33,"endColumn":22,"suggestions":"97"},{"ruleId":"85","severity":1,"message":"98","line":31,"column":5,"nodeType":"87","endLine":31,"endColumn":28,"suggestions":"99"},{"ruleId":"85","severity":1,"message":"86","line":89,"column":6,"nodeType":"87","endLine":89,"endColumn":17,"suggestions":"100"},{"ruleId":"101","severity":1,"message":"102","line":19,"column":48,"nodeType":"103","messageId":"104","endLine":19,"endColumn":50},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formSchema'. Either include it or remove the dependency array.","ArrayExpression",["107"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'setPageLoading' is assigned a value but never used.",["108"],"React Hook useEffect has a missing dependency: 'setClassList'. Either include it or remove the dependency array. If 'setClassList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["109"],"React Hook useEffect has a missing dependency: 'params.classid'. Either include it or remove the dependency array.",["110"],["111"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"114","fix":"120"},"Update the dependencies array to be: [formSchema, userInfo]",{"range":"121","text":"122"},"Update the dependencies array to be: [classInfo, formSchema]",{"range":"123","text":"124"},"Update the dependencies array to be: [params.userid, setClassList]",{"range":"125","text":"126"},"Update the dependencies array to be: [params.classid, params.userid, updated]",{"range":"127","text":"128"},{"range":"129","text":"124"},[2187,2197],"[formSchema, userInfo]",[2641,2652],"[classInfo, formSchema]",[1108,1123],"[params.userid, setClassList]",[1126,1149],"[params.classid, params.userid, updated]",[3225,3236]]